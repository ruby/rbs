#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'
module RBS
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 1070)

Types = RBS::Types
Namespace = RBS::Namespace
TypeName = RBS::TypeName
Declarations = RBS::AST::Declarations
Members = RBS::AST::Members
MethodType = RBS::MethodType
Annotation = RBS::AST::Annotation

class LocatedValue
  attr_reader :location
  attr_reader :value

  def initialize(location:, value:)
    @location = location
    @value = value
  end
end

require "strscan"

attr_reader :input
attr_reader :buffer
attr_reader :eof_re

def initialize(type, buffer:, eof_re:)
  super()
  @type = type
  @buffer = buffer
  @input = StringScanner.new(buffer.content)
  @eof_re = eof_re
  @eof = false
  @bound_variables_stack = []
  @comments = {}
  @ascii_only = buffer.content.ascii_only?
end

def start_merged_variables_scope
  set = @bound_variables_stack.last&.dup || Set.new
  @bound_variables_stack.push set
end

def start_new_variables_scope
  @bound_variables_stack.push Set.new
end

def reset_variable_scope
  @bound_variables_stack.pop
end

def insert_bound_variable(var)
  @bound_variables_stack.last << var
end

def is_bound_variable?(var)
  (@bound_variables_stack.last || Set.new).member?(var)
end

def self.parse_signature(input, eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:SIGNATURE, buffer: buffer, eof_re: eof_re).do_parse
end

def self.parse_type(input, variables: [], eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:TYPE, buffer: buffer, eof_re: eof_re).yield_self do |parser|
    parser.start_new_variables_scope

    variables.each do |var|
      parser.insert_bound_variable var
    end

    parser.do_parse
  ensure
    parser.reset_variable_scope
  end
end

def self.parse_method_type(input, variables: [], eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:METHODTYPE, buffer: buffer, eof_re: eof_re).yield_self do |parser|
    parser.start_new_variables_scope

    variables.each do |var|
      parser.insert_bound_variable var
    end

    parser.do_parse
  ensure
    parser.reset_variable_scope
  end
end

def leading_comment(location)
  @comments[location.start_line-1]
end

def push_comment(string, location)
  if (comment = leading_comment(location)) && comment.location.start_column == location.start_column
    comment.concat(string: "#{string}\n", location: location)
    @comments[comment.location.end_line] = comment
  else
    new_comment = AST::Comment.new(string: "#{string}\n", location: location)
    @comments[new_comment.location.end_line] = new_comment
  end
end

def new_token(type, value = input.matched)
  charpos = charpos(input)
  matched = input.matched

  if matched
    start_index = charpos - matched.size
    end_index = charpos

    location = RBS::Location.new(buffer: buffer,
                                 start_pos: start_index,
                                 end_pos: end_index)

    [type, LocatedValue.new(location: location, value: value)]
  else
    # scanner hasn't matched yet
    [false, nil]
  end
end

def charpos(scanner)
  if @ascii_only
    scanner.pos
  else
    scanner.charpos
  end
end

def empty_params_result
  [
    [],
    [],
    nil,
    [],
    {},
    {},
    nil
  ]
end

KEYWORDS = {
  "class" => :kCLASS,
  "type" => :kTYPE,
  "def" => :kDEF,
  "self" => :kSELF,
  "void" => :kVOID,
  "any" => :kANY,
  "untyped" => :kUNTYPED,
  "top" => :kTOP,
  "bot" => :kBOT,
  "instance" => :kINSTANCE,
  "bool" => :kBOOL,
  "nil" => :kNIL,
  "true" => :kTRUE,
  "false" => :kFALSE,
  "singleton" => :kSINGLETON,
  "interface" => :kINTERFACE,
  "end" => :kEND,
  "include" => :kINCLUDE,
  "extend" => :kEXTEND,
  "prepend" => :kPREPEND,
  "module" => :kMODULE,
  "attr_reader" => :kATTRREADER,
  "attr_writer" => :kATTRWRITER,
  "attr_accessor" => :kATTRACCESSOR,
  "public" => :kPUBLIC,
  "private" => :kPRIVATE,
  "alias" => :kALIAS,
  "extension" => :kEXTENSION,
  "incompatible" => :kINCOMPATIBLE,
  "unchecked" => :kUNCHECKED,
  "overload" => :kOVERLOAD,
  "out" => :kOUT,
  "in" => :kIN,
}
KEYWORDS_RE = /#{Regexp.union(*KEYWORDS.keys)}\b/

PUNCTS = {
  "===" => :tOPERATOR,
  "==" => :tOPERATOR,
  "=~" => :tOPERATOR,
  "!~" => :tOPERATOR,
  "!=" => :tOPERATOR,
  ">=" => :tOPERATOR,
  "<<" => :tOPERATOR,
  "<=>" => :tOPERATOR,
  "<=" => :tOPERATOR,
  ">>" => :tOPERATOR,
  ">" => :tOPERATOR,
  "~" => :tOPERATOR,
  "+@" => :tOPERATOR,
  "+" => :tOPERATOR,
  "[]=" => :tOPERATOR,
  "[]" => :tOPERATOR,
  "::" => :kCOLON2,
  ":" => :kCOLON,
  "(" => :kLPAREN,
  ")" => :kRPAREN,
  "[" => :kLBRACKET,
  "]" => :kRBRACKET,
  "{" => :kLBRACE,
  "}" => :kRBRACE,
  "," => :kCOMMA,
  "|" => :kBAR,
  "&" => :kAMP,
  "^" => :kHAT,
  "->" => :kARROW,
  "=>" => :kFATARROW,
  "=" => :kEQ,
  "?" => :kQUESTION,
  "!" => :kEXCLAMATION,
  "**" => :kSTAR2,
  "*" => :kSTAR,
  "..." => :kDOT3,
  "." => :kDOT,
  "<" => :kLT,
  "-@" => :tOPERATOR,
  "-" => :tOPERATOR,
  "/" => :tOPERATOR,
  "`" => :tOPERATOR,
  "%" => :tOPERATOR,
}
PUNCTS_RE = Regexp.union(*PUNCTS.keys)

ANNOTATION_RE = Regexp.union(/%a\{.*?\}/,
                             /%a\[.*?\]/,
                             /%a\(.*?\)/,
                             /%a\<.*?\>/,
                             /%a\|.*?\|/)

escape_sequences = %w[a b e f n r s t v "].map { |l| "\\\\#{l}" }
DBL_QUOTE_STR_ESCAPE_SEQUENCES_RE = /(#{escape_sequences.join("|")})/

def next_token
  if @type
    type = @type
    @type = nil
    return [:"type_#{type}", nil]
  end

  return new_token(false, '') if @eof

  while true
    return new_token(false, '') if input.eos?

    case
    when input.scan(/\s+/)
      # skip
    when input.scan(/#(( *)|( ?(?<string>.*)))\n/)
      charpos = charpos(input)
      start_index = charpos - input.matched.size
      end_index = charpos-1

      location = RBS::Location.new(buffer: buffer,
                                               start_pos: start_index,
                                               end_pos: end_index)

      push_comment input[:string] || "", location
    else
      break
    end
  end

  case
  when eof_re && input.scan(eof_re)
    @eof = true
    [:tEOF, input.matched]
  when input.scan(/`[a-zA-Z_]\w*`/)
    s = input.matched.yield_self {|s| s[1, s.length-2] }
    new_token(:tQUOTEDIDENT, s)
  when input.scan(/`(\\`|[^` :])+`/)
    s = input.matched.yield_self {|s| s[1, s.length-2] }.gsub(/\\`/, '`')
    new_token(:tQUOTEDMETHOD, s)
  when input.scan(ANNOTATION_RE)
    s = input.matched.yield_self {|s| s[3, s.length-4] }.strip
    new_token(:tANNOTATION, s)
  when input.scan(/self\?/)
    new_token(:kSELFQ, "self?")
  when input.scan(/(([a-zA-Z]\w*)|(_\w+))=/)
    new_token(:tWRITE_ATTR)
  when input.scan(KEYWORDS_RE)
    new_token(KEYWORDS[input.matched], input.matched.to_sym)
  when input.scan(/:((@{,2}|\$)?\w+(\?|\!)?|[|&\/%~`^]|<=>|={2,3}|=~|[<>]{2}|[<>]=?|[-+]@?|\*{1,2}|\[\]=?|![=~]?)\b?/)
    s = input.matched.yield_self {|s| s[1, s.length] }.to_sym
    new_token(:tSYMBOL, s)
  when input.scan(/[+-]?\d[\d_]*/)
    new_token(:tINTEGER, input.matched.to_i)
  when input.scan(PUNCTS_RE)
    new_token(PUNCTS[input.matched])
  when input.scan(/(::)?([A-Z]\w*::)+/)
    new_token(:tNAMESPACE)
  when input.scan(/[a-z_]\w*:/)
    new_token(:tLKEYWORD, input.matched.chop.to_sym)
  when input.scan(/[a-z_]\w*[?!]:/)
    new_token(:tLKEYWORD_Q_E, input.matched.chop.to_sym)
  when input.scan(/[A-Z]\w*:/)
    new_token(:tUKEYWORD, input.matched.chop.to_sym)
  when input.scan(/[A-Z]\w*[?!]:/)
    new_token(:tUKEYWORD_Q_E, input.matched.chop.to_sym)
  when input.scan(/\$[A-Za-z_]\w*/)
    new_token(:tGLOBALIDENT)
  when input.scan(/@[a-zA-Z_]\w*/)
    new_token(:tIVAR, input.matched.to_sym)
  when input.scan(/@@[a-zA-Z_]\w*/)
    new_token(:tCLASSVAR, input.matched.to_sym)
  when input.scan(/_[a-zA-Z]\w*\b/)
    new_token(:tINTERFACEIDENT)
  when input.scan(/[A-Z]\w*\b/)
    new_token(:tUIDENT)
  when input.scan(/[a-z_]\w*\b/)
    new_token(:tLIDENT)
  when input.scan(/"(\\"|[^"])*"/)
    s = input.matched.yield_self {|s| s[1, s.length - 2] }
                     .gsub(DBL_QUOTE_STR_ESCAPE_SEQUENCES_RE) do |match|
                       case match
                       when '\\a' then "\a"
                       when '\\b' then "\b"
                       when '\\e' then "\e"
                       when '\\f' then "\f"
                       when '\\n' then "\n"
                       when '\\r' then "\r"
                       when '\\s' then "\s"
                       when '\\t' then "\t"
                       when '\\v' then "\v"
                       when '\\"' then '"'
                       end
                     end
    new_token(:tSTRING, s)
  when input.scan(/'(\\'|[^'])*'/)
    s = input.matched.yield_self {|s| s[1, s.length - 2] }.gsub(/\\'/, "'")
    new_token(:tSTRING, s)
  else
    raise "Unexpected token: #{input.peek(10)}..."
  end
end

def on_error(token_id, error_value, value_stack)
  raise SyntaxError.new(token_str: token_to_str(token_id), error_value: error_value, value_stack: value_stack)
end

class SyntaxError < StandardError
  attr_reader :token_str, :error_value, :value_stack

  def initialize(token_str:, error_value:, value_stack: nil)
    @token_str = token_str
    @error_value = error_value
    @value_stack = value_stack

    super "parse error on value: #{error_value.inspect} (#{token_str})"
  end
end

class SemanticsError < StandardError
  attr_reader :subject, :location, :original_message

  def initialize(message, subject:, location:)
    @subject = subject
    @location = location
    @original_message = message

    super "parse error on #{location}: #{message}"
  end
end

...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'348,349,33,350,5,113,37,33,33,42,335,391,49,33,33,347,43,243,333,390',
'40,41,55,56,57,58,59,60,61,62,352,33,63,54,64,65,66,77,67,68,69,83,33',
'32,53,343,337,338,32,32,341,339,342,302,32,32,33,340,82,70,71,72,74',
'76,75,336,345,346,73,78,80,126,32,124,48,84,85,81,86,348,349,33,350',
'32,96,97,98,99,104,49,39,33,33,33,347,49,49,32,125,40,41,55,56,57,58',
'59,60,61,62,79,185,63,54,64,65,66,77,67,68,69,83,53,32,160,343,337,338',
'53,53,341,339,342,32,32,32,125,340,82,70,71,72,74,76,75,336,345,346',
'73,78,80,40,41,161,222,84,85,81,86,348,349,120,350,180,96,97,98,99,164',
'179,101,102,165,103,347,166,277,324,357,223,39,55,56,57,58,59,60,61',
'62,79,394,63,54,64,65,66,77,67,68,69,83,278,125,125,343,337,338,395',
'396,341,339,342,320,40,41,125,340,82,70,71,72,74,76,75,336,345,346,73',
'78,80,167,316,125,125,84,85,81,86,348,349,168,350,170,96,97,98,99,2',
'3,4,40,41,171,347,40,41,40,41,40,41,55,56,57,58,59,60,61,62,79,172,63',
'54,64,65,66,77,67,68,69,83,40,41,113,343,337,338,40,41,341,339,342,40',
'41,40,41,340,82,70,71,72,74,76,75,336,345,346,73,78,80,348,349,178,350',
'84,85,81,86,-4,181,-242,184,33,41,117,347,-242,40,41,40,41,113,55,56',
'57,58,59,60,61,62,79,187,63,54,64,65,66,77,67,68,69,83,40,41,180,343',
'337,338,280,281,341,339,342,32,369,370,188,340,82,70,71,72,74,76,75',
'336,345,346,73,78,80,348,349,-104,350,84,85,81,86,40,41,40,41,-105,39',
'-106,347,385,386,40,41,40,41,55,56,57,58,59,60,61,62,79,-107,63,54,64',
'65,66,77,67,68,69,83,40,41,-108,343,337,338,40,41,341,339,342,40,41',
'40,41,340,82,70,71,72,74,76,75,336,345,346,73,78,80,40,41,-109,-110',
'84,85,81,86,348,349,-111,350,-112,96,97,98,99,-113,-114,48,-129,193',
'194,347,195,196,197,198,205,206,55,56,57,58,59,60,61,62,79,42,63,54',
'64,65,66,77,67,68,69,83,224,238,246,343,337,338,247,248,341,339,342',
'250,252,42,254,340,82,70,71,72,74,76,75,336,345,346,73,78,80,348,349',
'254,350,84,85,81,86,254,260,42,264,268,270,272,347,273,309,268,311,272',
'321,55,56,57,58,59,60,61,62,79,322,63,54,64,65,66,77,67,68,69,83,323',
'326,326,343,337,338,326,356,341,339,342,358,365,366,367,340,82,70,71',
'72,74,76,75,336,345,346,73,78,80,368,371,373,376,84,85,81,86,33,376',
'376,96,97,98,99,389,392,393,22,23,21,400,26,-219,25,401,30,402,131,132',
'133,134,135,136,137,138,142,16,139,130,140,141,66,77,67,68,69,83,404',
'32,409,410,411,28,412,156,409,157,159,,,,,,82,70,71,72,74,76,75,,,,73',
'78,80,,,,,84,85,81,86,33,,,96,97,98,99,,,,22,23,21,,26,,25,,30,,131',
'132,133,134,135,136,137,138,142,16,139,130,140,141,66,77,67,68,69,83',
',32,,,174,28,,177,,175,,,,,,,82,70,71,72,74,76,75,,,,73,78,80,176,,',
',84,85,81,86,33,,,96,97,98,99,,,,22,23,21,,26,-219,25,,30,,131,132,133',
'134,135,136,137,138,142,16,139,130,140,141,66,77,67,68,69,83,,32,,,',
'28,,156,,157,159,,,,,,82,70,71,72,74,76,75,,,,73,78,80,,,,,84,85,81',
'86,33,,,96,97,98,99,,,,22,23,21,,26,-219,25,,30,,131,132,133,134,135',
'136,137,138,142,16,139,130,140,141,66,77,67,68,69,83,,32,,,,28,,156',
',157,159,,,,,,82,70,71,72,74,76,75,,,,73,78,80,,,,,84,85,81,86,33,,',
'96,97,98,99,,,,22,23,21,,26,-219,25,,30,,131,132,133,134,135,136,137',
'138,142,16,139,130,140,141,66,77,67,68,69,83,,32,,,,28,,230,,,159,,',
',,,82,70,71,72,74,76,75,,,,73,78,80,,,,,84,85,81,86,33,,,96,97,98,99',
',,,22,23,21,,26,-219,25,,30,,131,132,133,134,135,136,137,138,142,16',
'139,130,140,141,66,77,67,68,69,83,,32,,,,28,,230,,,159,,,,,,82,70,71',
'72,74,76,75,,,,73,78,80,,,,,84,85,81,86,96,97,98,99,,,,90,89,91,,,,',
',,,55,56,57,58,59,60,61,62,79,,63,54,64,65,66,77,67,68,69,83,,,,,,,',
',190,,191,,,,,,82,70,71,72,74,76,75,,95,94,73,78,80,,,,,84,85,81,86',
'96,97,98,99,,,,90,89,91,,,,,,40,41,55,56,57,58,59,60,61,62,79,,63,54',
'64,65,66,77,67,68,69,83,192,,,,,,,,,,,,,,,,82,70,71,72,74,76,75,,95',
'94,73,78,80,96,97,98,99,84,85,81,86,,,,,,,,,,55,56,57,58,59,60,61,62',
'79,,63,54,64,65,66,77,67,68,69,83,190,,191,,,,,230,,,159,,,,,,82,70',
'71,72,74,76,75,190,,191,73,78,80,96,97,98,99,84,85,81,86,,,,,,,,40,41',
'55,56,57,58,59,60,61,62,79,,63,54,64,65,66,77,67,68,69,83,192,40,41',
',,,,230,,,159,,,,,,82,70,71,72,74,76,75,192,,,73,78,80,96,97,98,99,84',
'85,81,86,,,,,,,,,,55,56,57,58,59,60,61,62,79,,63,54,64,65,66,77,67,68',
'69,83,190,,191,190,,191,190,,191,,,,,,,,82,70,71,72,74,76,75,,,,73,78',
'80,,,,,84,85,81,86,,,,,,,,40,41,,40,41,,40,41,-242,,33,,117,,-242,,',
'297,298,113,,,192,,,192,,,192,,-242,,33,,117,,-242,,299,297,298,113',
',,,,,294,293,,,32,-242,,33,,117,,-242,,299,297,298,113,,,,285,,294,293',
',174,32,,177,,175,,,320,,299,,,,,,,308,,294,293,,33,32,,176,,316,317',
'313,314,315,22,23,21,318,26,,25,312,30,,8,12,19,20,9,10,13,14,15,16',
'17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,45,30,,8,12,19,20,9,10',
'13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12',
'19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25',
',30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23',
'21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32',
',,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27',
',,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16',
'17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10',
'13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12',
'19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25',
',30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23',
'21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32',
',,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27',
',,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16',
'17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10',
'13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12',
'19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25',
',30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23',
'21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32',
',,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27',
',,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16',
'17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10',
'13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12',
'19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25',
',30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23',
'21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32',
',,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27',
',,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16',
'17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10',
'13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12',
'19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25',
',30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23',
'21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32',
',,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27',
',,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16',
'17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10',
'13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12',
'19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25',
',30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23',
'21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27,,,33,,,,,32',
',,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16,17,18,11,27',
',,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10,13,14,15,16',
'17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12,19,20,9,10',
'13,14,15,16,17,18,11,27,,,33,,,,,32,,,,28,22,23,21,,26,,25,,30,,8,12',
'19,20,9,10,13,14,15,16,17,18,11,27,,,,,,,,32,,,,28' ]
        racc_action_table = arr = ::Array.new(2931, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'320,320,48,320,1,274,5,177,214,7,319,376,28,215,216,320,24,215,319,376',
'44,44,320,320,320,320,320,320,320,320,320,243,320,320,320,320,320,320',
'320,320,320,320,264,48,28,320,320,320,177,214,320,320,320,274,215,216',
'270,320,320,320,320,320,320,320,320,320,320,320,320,320,320,47,243,46',
'27,320,320,320,320,327,327,272,327,264,327,327,327,327,32,119,35,316',
'317,318,327,160,205,270,46,47,47,327,327,327,327,327,327,327,327,327',
'123,327,327,327,327,327,327,327,327,327,327,119,272,51,327,327,327,160',
'205,327,327,327,316,317,318,123,327,327,327,327,327,327,327,327,327',
'327,327,327,327,327,6,6,51,183,327,327,327,327,328,328,36,328,116,328',
'328,328,328,87,116,31,31,88,31,328,89,265,301,325,183,6,328,328,328',
'328,328,328,328,328,328,381,328,328,328,328,328,328,328,328,328,328',
'265,301,325,328,328,328,382,383,328,328,328,307,169,169,381,328,328',
'328,328,328,328,328,328,328,328,328,328,328,328,90,307,382,383,328,328',
'328,328,329,329,91,329,93,329,329,329,329,0,0,0,186,186,94,329,208,208',
'209,209,210,210,329,329,329,329,329,329,329,329,329,95,329,329,329,329',
'329,329,329,329,329,329,211,211,113,329,329,329,212,212,329,329,329',
'213,213,219,219,329,329,329,329,329,329,329,329,329,329,329,329,329',
'329,353,353,115,353,329,329,329,329,34,117,34,120,34,121,34,353,34,220',
'220,221,221,34,353,353,353,353,353,353,353,353,353,127,353,353,353,353',
'353,353,353,353,353,353,261,261,128,353,353,353,267,267,353,353,353',
'34,344,344,129,353,353,353,353,353,353,353,353,353,353,353,353,353,353',
'371,371,130,371,353,353,353,353,354,354,355,355,131,34,132,371,368,368',
'374,374,377,377,371,371,371,371,371,371,371,371,371,133,371,371,371',
'371,371,371,371,371,371,371,379,379,134,371,371,371,388,388,371,371',
'371,403,403,405,405,371,371,371,371,371,371,371,371,371,371,371,371',
'371,371,406,406,135,136,371,371,371,371,384,384,137,384,138,384,384',
'384,384,139,140,141,142,145,146,384,148,150,153,154,161,162,384,384',
'384,384,384,384,384,384,384,163,384,384,384,384,384,384,384,384,384',
'384,188,204,217,384,384,384,218,223,384,384,384,228,239,240,241,384',
'384,384,384,384,384,384,384,384,384,384,384,384,384,411,411,242,411',
'384,384,384,384,244,245,249,253,254,255,256,411,258,276,278,279,283',
'297,411,411,411,411,411,411,411,411,411,298,411,411,411,411,411,411',
'411,411,411,411,299,313,314,411,411,411,315,323,411,411,411,326,330',
'331,332,411,411,411,411,411,411,411,411,411,411,411,411,411,411,334',
'352,356,360,411,411,411,411,49,362,364,49,49,49,49,375,378,380,49,49',
'49,385,49,49,49,386,49,387,49,49,49,49,49,49,49,49,49,49,49,49,49,49',
'49,49,49,49,49,49,391,49,397,399,402,49,408,49,412,49,49,,,,,,49,49',
'49,49,49,49,49,,,,49,49,49,,,,,49,49,49,49,156,,,156,156,156,156,,,',
'156,156,156,,156,,156,,156,,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,,156,,,114,156,,114,,114,,,',
',,,156,156,156,156,156,156,156,,,,156,156,156,114,,,,156,156,156,156',
'194,,,194,194,194,194,,,,194,194,194,,194,194,194,,194,,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
',194,,,,194,,194,,194,194,,,,,,194,194,194,194,194,194,194,,,,194,194',
'194,,,,,194,194,194,194,195,,,195,195,195,195,,,,195,195,195,,195,195',
'195,,195,,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,,195,,,,195,,195,,195,195,,,,,,195,195,195,195,195',
'195,195,,,,195,195,195,,,,,195,195,195,195,196,,,196,196,196,196,,,',
'196,196,196,,196,196,196,,196,,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,,196,,,,196,,196,,,196,,,,,',
'196,196,196,196,196,196,196,,,,196,196,196,,,,,196,196,196,196,250,',
',250,250,250,250,,,,250,250,250,,250,250,250,,250,,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,,250,,,',
'250,,250,,,250,,,,,,250,250,250,250,250,250,250,,,,250,250,250,,,,,250',
'250,250,250,30,30,30,30,,,,30,30,30,,,,,,,,30,30,30,30,30,30,30,30,30',
',30,30,30,30,30,30,30,30,30,30,,,,,,,,,143,,143,,,,,,30,30,30,30,30',
'30,30,,30,30,30,30,30,,,,,30,30,30,30,165,165,165,165,,,,165,165,165',
',,,,,143,143,165,165,165,165,165,165,165,165,165,,165,165,165,165,165',
'165,165,165,165,165,143,,,,,,,,,,,,,,,,165,165,165,165,165,165,165,',
'165,165,165,165,165,197,197,197,197,165,165,165,165,,,,,,,,,,197,197',
'197,197,197,197,197,197,197,,197,197,197,197,197,197,197,197,197,197',
'199,,199,,,,,197,,,197,,,,,,197,197,197,197,197,197,197,201,,201,197',
'197,197,198,198,198,198,197,197,197,197,,,,,,,,199,199,198,198,198,198',
'198,198,198,198,198,,198,198,198,198,198,198,198,198,198,198,199,201',
'201,,,,,198,,,198,,,,,,198,198,198,198,198,198,198,201,,,198,198,198',
'230,230,230,230,198,198,198,198,,,,,,,,,,230,230,230,230,230,230,230',
'230,230,,230,230,230,230,230,230,230,230,230,230,202,,202,203,,203,234',
',234,,,,,,,,230,230,230,230,230,230,230,,,,230,230,230,,,,,230,230,230',
'230,,,,,,,,202,202,,203,203,,234,234,271,,271,,271,,271,,,271,271,271',
',,202,,,203,,,234,,275,,275,,275,,275,,271,275,275,275,,,,,,271,271',
',,271,282,,282,,282,,282,,275,282,282,282,,,,271,,275,275,,284,275,',
'284,,284,,,284,,282,,,,,,,275,,282,282,,2,282,,284,,284,284,284,284',
'284,2,2,2,284,2,,2,282,2,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,,25,,,,,2,,,',
'2,25,25,25,,25,,25,25,25,,25,25,25,25,25,25,25,25,25,25,25,25,25,25',
',,26,,,,,25,,,,25,26,26,26,,26,,26,,26,,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,,,40,,,,,26,,,,26,40,40,40,,40,,40,,40,,40,40,40,40,40,40',
'40,40,40,40,40,40,40,40,,,41,,,,,40,,,,40,41,41,41,,41,,41,,41,,41,41',
'41,41,41,41,41,41,41,41,41,41,41,41,,,43,,,,,41,,,,41,43,43,43,,43,',
'43,,43,,43,43,43,43,43,43,43,43,43,43,43,43,43,43,,,53,,,,,43,,,,43',
'53,53,53,,53,,53,,53,,53,53,53,53,53,53,53,53,53,53,53,53,53,53,,,92',
',,,,53,,,,53,92,92,92,,92,,92,,92,,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,,,125,,,,,92,,,,92,125,125,125,,125,,125,,125,,125,125,125',
'125,125,125,125,125,125,125,125,125,125,125,,,157,,,,,125,,,,125,157',
'157,157,,157,,157,,157,,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,,,158,,,,,157,,,,157,158,158,158,,158,,158,,158,,158,158',
'158,158,158,158,158,158,158,158,158,158,158,158,,,159,,,,,158,,,,158',
'159,159,159,,159,,159,,159,,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,,,166,,,,,159,,,,159,166,166,166,,166,,166,,166,,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,,,167,,,,,166,,',
',166,167,167,167,,167,,167,,167,,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,,,168,,,,,167,,,,167,168,168,168,,168,,168,,168',
',168,168,168,168,168,168,168,168,168,168,168,168,168,168,,,170,,,,,168',
',,,168,170,170,170,,170,,170,,170,,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,,,171,,,,,170,,,,170,171,171,171,,171,,171,,171',
',171,171,171,171,171,171,171,171,171,171,171,171,171,171,,,172,,,,,171',
',,,171,172,172,172,,172,,172,,172,,172,172,172,172,172,172,172,172,172',
'172,172,172,172,172,,,178,,,,,172,,,,172,178,178,178,,178,,178,,178',
',178,178,178,178,178,178,178,178,178,178,178,178,178,178,,,179,,,,,178',
',,,178,179,179,179,,179,,179,,179,,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,,,181,,,,,179,,,,179,181,181,181,,181,,181,,181',
',181,181,181,181,181,181,181,181,181,181,181,181,181,181,,,200,,,,,181',
',,,181,200,200,200,,200,,200,,200,,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,,,206,,,,,200,,,,200,206,206,206,,206,,206,,206',
',206,206,206,206,206,206,206,206,206,206,206,206,206,206,,,224,,,,,206',
',,,206,224,224,224,,224,,224,,224,,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,,,246,,,,,224,,,,224,246,246,246,,246,,246,,246',
',246,246,246,246,246,246,246,246,246,246,246,246,246,246,,,273,,,,,246',
',,,246,273,273,273,,273,,273,,273,,273,273,273,273,273,273,273,273,273',
'273,273,273,273,273,,,309,,,,,273,,,,273,309,309,309,,309,,309,,309',
',309,309,309,309,309,309,309,309,309,309,309,309,309,309,,,321,,,,,309',
',,,309,321,321,321,,321,,321,,321,,321,321,321,321,321,321,321,321,321',
'321,321,321,321,321,,,322,,,,,321,,,,321,322,322,322,,322,,322,,322',
',322,322,322,322,322,322,322,322,322,322,322,322,322,322,,,359,,,,,322',
',,,322,359,359,359,,359,,359,,359,,359,359,359,359,359,359,359,359,359',
'359,359,359,359,359,,,361,,,,,359,,,,359,361,361,361,,361,,361,,361',
',361,361,361,361,361,361,361,361,361,361,361,361,361,361,,,363,,,,,361',
',,,361,363,363,363,,363,,363,,363,,363,363,363,363,363,363,363,363,363',
'363,363,363,363,363,,,365,,,,,363,,,,363,365,365,365,,365,,365,,365',
',365,365,365,365,365,365,365,365,365,365,365,365,365,365,,,366,,,,,365',
',,,365,366,366,366,,366,,366,,366,,366,366,366,366,366,366,366,366,366',
'366,366,366,366,366,,,367,,,,,366,,,,366,367,367,367,,367,,367,,367',
',367,367,367,367,367,367,367,367,367,367,367,367,367,367,,,373,,,,,367',
',,,367,373,373,373,,373,,373,,373,,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,,,389,,,,,373,,,,373,389,389,389,,389,,389,,389',
',389,389,389,389,389,389,389,389,389,389,389,389,389,389,,,392,,,,,389',
',,,389,392,392,392,,392,,392,,392,,392,392,392,392,392,392,392,392,392',
'392,392,392,392,392,,,393,,,,,392,,,,392,393,393,393,,393,,393,,393',
',393,393,393,393,393,393,393,393,393,393,393,393,393,393,,,,,,,,393',
',,,393' ]
        racc_action_check = arr = ::Array.new(2931, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   173,     4,  1513,   nil,   nil,     6,   103,   -42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    -4,  1549,  1585,    56,    -6,   nil,
  1063,   167,    84,   nil,   316,    14,   140,   nil,   nil,   nil,
  1621,  1657,   nil,  1693,   -27,   nil,    52,    52,    -2,   604,
   nil,   101,   nil,  1729,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   144,   125,   119,
   174,   184,  1765,   197,   207,   224,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   268,   694,   266,   160,   273,   nil,    71,
   317,   273,   nil,    89,   nil,  1801,   nil,   320,   350,   345,
   337,   347,   349,   366,   379,   408,   409,   416,   418,   423,
   424,   451,   426,  1112,   nil,   427,   426,   nil,   428,   nil,
   429,   nil,   nil,   430,   431,   nil,   681,  1837,  1873,  1909,
    77,   456,   429,   438,   nil,  1137,  1945,  1981,  2017,   165,
  2053,  2089,  2125,   nil,   nil,   nil,   nil,     3,  2161,  2197,
   nil,  2233,   nil,   132,   nil,   nil,   202,   nil,   450,   nil,
   nil,   nil,   nil,   nil,   758,   835,   912,  1203,  1269,  1244,
  2269,  1267,  1376,  1379,   478,    78,  2305,   nil,   206,   208,
   210,   232,   238,   243,     4,     9,    10,   446,   503,   245,
   278,   280,   nil,   505,  2341,   nil,   nil,   nil,   465,   nil,
  1335,   nil,   nil,   nil,  1382,   nil,   nil,   nil,   nil,   489,
   462,   494,   511,    27,   517,   533,  2377,   nil,   nil,   488,
   989,   nil,   nil,   481,   462,   498,   497,   nil,   525,   nil,
   nil,   303,   nil,   nil,    38,   154,   nil,   279,   nil,   nil,
    52,  1429,    77,  2413,    -8,  1451,   526,   nil,   468,   546,
   nil,   nil,  1473,   503,  1460,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   506,   516,   514,
   nil,   155,   nil,   nil,   nil,   nil,   nil,   168,   nil,  2449,
   nil,   nil,   nil,   540,   541,   545,    87,    88,    89,   -62,
    -2,  2485,  2521,   567,   nil,   156,   525,    77,   156,   235,
   563,   564,   565,   nil,   561,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   311,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   544,   306,   340,   342,   558,   nil,   nil,  2557,
   585,  2593,   591,  2629,   592,  2665,  2701,  2737,   363,   nil,
   nil,   377,   nil,  2773,   350,   571,     0,   352,   572,   374,
   573,   168,   185,   186,   456,   564,   568,   595,   380,  2809,
   nil,   629,  2845,  2881,   nil,   nil,   nil,   592,   nil,   607,
   nil,   nil,   595,   385,   nil,   387,   403,   nil,   607,   nil,
   nil,   527,   598,   nil,   nil ]

racc_action_default = [
  -246,  -246,  -242,    -6,   -15,  -246,    -4,  -157,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -242,  -242,  -246,   -80,  -184,
  -246,  -246,  -243,  -245,   -16,    -4,  -147,   415,    -1,    -5,
  -242,  -242,  -183,  -242,  -185,  -178,  -246,  -246,  -242,  -242,
  -182,  -246,  -204,  -242,  -104,  -105,  -106,  -107,  -108,  -109,
  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -246,  -188,  -246,
  -246,  -246,  -242,  -246,  -246,  -246,  -199,  -200,  -201,  -202,
  -235,  -236,  -237,  -238,  -244,    -2,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -16,  -246,  -246,  -246,  -246,    -3,   -80,
  -246,  -158,  -159,  -246,  -179,  -242,  -180,  -246,  -246,  -246,
  -170,  -160,  -164,  -171,  -172,  -161,  -162,  -165,  -166,  -169,
  -163,  -115,  -167,  -231,  -197,  -246,  -208,  -209,  -211,  -212,
  -214,  -215,  -218,  -221,  -223,  -224,  -242,  -242,  -242,  -242,
   -80,  -246,  -246,  -206,  -187,  -246,  -242,  -242,  -242,  -193,
  -242,  -242,  -242,   -17,   -14,   -14,   -14,  -242,  -242,  -242,
  -240,  -242,   -79,  -246,  -149,  -177,  -186,  -181,   -81,  -225,
  -232,  -233,  -234,  -198,  -242,  -242,  -242,  -219,  -219,  -231,
  -242,  -231,  -231,  -231,  -246,   -80,  -242,  -189,  -190,  -191,
  -192,  -194,  -195,  -196,  -242,  -242,  -242,  -246,  -246,  -154,
  -155,  -156,  -148,  -246,  -242,  -207,  -215,  -210,  -217,  -213,
  -246,  -220,  -222,  -226,  -231,  -227,  -228,  -230,   -82,  -246,
  -203,  -137,  -137,  -242,  -137,  -246,  -242,  -241,  -150,  -205,
  -242,  -229,   -83,   -19,  -145,   -24,   -30,   -26,   -29,   -57,
  -239,  -153,  -216,   -30,  -242,  -246,  -139,  -142,  -146,   -30,
  -242,   -16,  -242,  -242,   -16,   -16,   -20,  -138,  -145,  -246,
  -143,  -144,   -16,   -25,   -71,   -23,   -31,   -32,   -33,   -34,
   -35,   -36,   -37,   -38,   -39,   -40,   -41,  -246,  -246,  -246,
   -27,  -246,   -56,   -58,   -59,   -60,   -61,   -71,   -18,  -242,
  -140,  -141,   -22,   -42,   -42,   -42,  -242,  -242,  -242,   -68,
  -246,  -242,  -242,  -246,   -28,  -246,  -246,  -246,  -246,  -246,
   -62,   -64,   -66,   -69,  -246,   -72,   -86,   -87,   -88,   -89,
   -90,   -91,   -92,   -93,   -94,   -97,   -98,   -99,  -100,  -101,
  -102,  -103,  -129,  -246,   -53,   -54,  -246,   -21,   -43,  -242,
   -50,  -242,   -50,  -242,   -50,  -242,  -242,  -242,   -73,   -95,
   -96,  -246,  -151,  -242,   -44,  -246,  -246,   -46,  -246,   -48,
  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,   -55,  -242,
   -51,  -246,  -242,  -242,   -63,   -65,   -67,   -15,   -84,  -246,
   -74,   -75,  -246,   -45,   -52,   -47,   -49,   -70,   -76,   -77,
   -85,  -246,   -15,  -152,   -78 ]

racc_goto_table = [
     6,    93,   116,    46,    92,   114,   127,   163,    50,    87,
   353,   189,   200,   129,   146,   256,   128,   360,   362,   364,
   266,   123,   258,   226,    47,   229,    38,   271,     1,   375,
   407,   378,    34,   380,   275,   214,   215,   216,   121,   122,
   282,    35,   283,   372,   310,   414,   106,   143,   263,   258,
   269,   258,   231,   232,   105,   118,   253,   255,   300,   259,
   304,   387,   327,   328,   329,   305,   306,   233,   244,   235,
   236,   237,   274,   303,   399,   334,   384,   397,   119,   262,
   162,   265,   279,   183,   173,   217,   200,   227,   100,   nil,
   169,   nil,   nil,   nil,   nil,   330,   331,   332,   nil,   182,
   nil,   413,   251,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   186,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    93,   nil,   nil,    92,
   204,   nil,   nil,   nil,   207,   218,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   199,   201,   202,   203,   225,   146,
   240,   nil,   nil,   nil,   208,   209,   210,   nil,   211,   212,
   213,   nil,   241,   242,   nil,   nil,   219,   220,   249,   221,
   nil,   nil,   128,   128,   245,   239,   nil,   nil,   nil,   nil,
   nil,   nil,   143,   143,   143,   nil,   nil,   nil,   234,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   276,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   128,   nil,   nil,   nil,   nil,   nil,   nil,   116,
   nil,   nil,   nil,   116,   261,   307,   nil,   nil,   143,   nil,
   116,   301,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   325,   nil,   nil,
   nil,   351,   nil,   nil,   nil,   nil,   nil,   nil,   351,   351,
   351,   359,   361,   363,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   354,
   355,   nil,   nil,   nil,   351,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   351,   381,   382,   383,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   351,   nil,   374,   398,   377,
   nil,   379,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   388,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   351,   nil,   nil,   nil,   nil,   403,   nil,   nil,
   405,   406 ]

racc_goto_check = [
     2,    51,    58,    20,    34,    15,    16,    59,    46,    61,
    35,    75,    63,    48,    65,    22,    58,    35,    35,    35,
    53,    20,    24,    70,     2,    70,     3,    19,     1,    36,
    44,    36,     4,    36,    19,    13,    13,    13,     2,     2,
    19,     5,    22,    35,    53,    44,     6,     2,    18,    24,
    21,    24,    71,    71,     3,     3,    17,    17,    23,    17,
    26,    35,    33,    33,    33,    27,    32,    75,    37,    75,
    75,    75,    38,    39,    35,    40,    42,    43,    45,    70,
    49,    52,    55,    56,    15,    57,    63,    66,    76,   nil,
     2,   nil,   nil,   nil,   nil,    24,    24,    24,   nil,    46,
   nil,    35,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    51,   nil,   nil,    34,
    46,   nil,   nil,   nil,    61,    58,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     2,     2,     2,    48,    65,
    59,   nil,   nil,   nil,     2,     2,     2,   nil,     2,     2,
     2,   nil,    16,    16,   nil,   nil,     2,     2,    59,     2,
   nil,   nil,    58,    58,    58,    46,   nil,   nil,   nil,   nil,
   nil,   nil,     2,     2,     2,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,   nil,    58,
   nil,   nil,   nil,    58,     2,    15,   nil,   nil,     2,   nil,
    58,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,    51,   nil,   nil,   nil,   nil,   nil,   nil,    51,    51,
    51,    34,    34,    34,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     2,   nil,   nil,   nil,    51,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    20,    20,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,   nil,     2,    34,     2,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51,   nil,   nil,   nil,   nil,     2,   nil,   nil,
     2,     2 ]

racc_goto_pointer = [
   nil,    28,    -2,    20,    29,    37,    12,   nil,   nil,   nil,
   nil,   nil,   nil,  -139,   nil,   -29,   -42,  -185,  -205,  -229,
   -22,  -205,  -228,  -214,  -221,   nil,  -214,  -209,   nil,   nil,
   nil,   nil,  -208,  -251,   -26,  -310,  -331,  -148,  -187,  -201,
  -244,   nil,  -292,  -307,  -367,    42,   -20,   nil,   -36,    29,
   nil,   -29,  -173,  -234,   nil,  -185,   -37,   -92,   -32,   -46,
   nil,   -21,   nil,  -144,   nil,   -35,  -108,   nil,   nil,   nil,
  -171,  -145,   nil,   nil,   nil,  -132,    57 ]

racc_goto_default = [
   nil,   nil,    44,   nil,   nil,   408,   296,   107,   108,   109,
   110,   111,   112,   nil,    36,   284,   115,   nil,   nil,   nil,
   nil,   nil,   nil,   257,    24,   286,   287,   288,   289,   290,
   291,   292,   295,   nil,   144,   nil,   nil,   nil,   nil,   nil,
   nil,   319,   nil,   nil,   nil,   nil,   nil,    51,   nil,   nil,
   344,   145,   nil,   nil,   267,   nil,   nil,   nil,    31,     7,
    29,   nil,    88,   158,    52,   228,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 82, :_reduce_1,
  3, 82, :_reduce_2,
  3, 82, :_reduce_3,
  0, 84, :_reduce_none,
  1, 84, :_reduce_none,
  0, 85, :_reduce_6,
  2, 85, :_reduce_7,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  0, 94, :_reduce_14,
  0, 95, :_reduce_15,
  0, 96, :_reduce_16,
  2, 96, :_reduce_17,
  8, 93, :_reduce_18,
  0, 99, :_reduce_19,
  2, 99, :_reduce_20,
  5, 99, :_reduce_21,
  8, 92, :_reduce_22,
  7, 92, :_reduce_23,
  0, 102, :_reduce_24,
  2, 102, :_reduce_25,
  1, 103, :_reduce_26,
  3, 103, :_reduce_27,
  4, 104, :_reduce_28,
  1, 104, :_reduce_29,
  0, 100, :_reduce_30,
  2, 100, :_reduce_31,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_38,
  1, 106, :_reduce_39,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  0, 114, :_reduce_42,
  2, 114, :_reduce_43,
  5, 112, :_reduce_44,
  7, 112, :_reduce_45,
  5, 112, :_reduce_46,
  7, 112, :_reduce_47,
  5, 112, :_reduce_48,
  7, 112, :_reduce_49,
  0, 117, :_reduce_50,
  2, 117, :_reduce_51,
  3, 117, :_reduce_52,
  3, 111, :_reduce_53,
  3, 111, :_reduce_54,
  5, 111, :_reduce_55,
  7, 91, :_reduce_56,
  0, 119, :_reduce_57,
  2, 119, :_reduce_58,
  1, 120, :_reduce_59,
  1, 120, :_reduce_60,
  1, 120, :_reduce_none,
  3, 108, :_reduce_62,
  6, 108, :_reduce_63,
  3, 109, :_reduce_64,
  6, 109, :_reduce_65,
  3, 110, :_reduce_66,
  6, 110, :_reduce_67,
  0, 121, :_reduce_68,
  1, 121, :_reduce_69,
  7, 107, :_reduce_70,
  0, 122, :_reduce_none,
  2, 122, :_reduce_72,
  0, 123, :_reduce_73,
  2, 123, :_reduce_74,
  2, 123, :_reduce_75,
  1, 125, :_reduce_76,
  1, 125, :_reduce_77,
  3, 125, :_reduce_78,
  3, 86, :_reduce_79,
  0, 128, :_reduce_80,
  3, 128, :_reduce_81,
  3, 130, :_reduce_82,
  4, 130, :_reduce_83,
  1, 124, :_reduce_none,
  2, 124, :_reduce_85,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  2, 116, :_reduce_95,
  2, 116, :_reduce_96,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  0, 98, :_reduce_137,
  3, 98, :_reduce_138,
  1, 133, :_reduce_139,
  3, 133, :_reduce_140,
  3, 134, :_reduce_141,
  0, 136, :_reduce_142,
  1, 136, :_reduce_143,
  1, 136, :_reduce_144,
  0, 135, :_reduce_145,
  1, 135, :_reduce_146,
  0, 126, :_reduce_147,
  3, 126, :_reduce_148,
  1, 137, :_reduce_149,
  3, 137, :_reduce_150,
  4, 113, :_reduce_151,
  8, 113, :_reduce_152,
  5, 88, :_reduce_153,
  3, 89, :_reduce_154,
  3, 89, :_reduce_155,
  3, 90, :_reduce_156,
  1, 83, :_reduce_none,
  3, 83, :_reduce_158,
  3, 83, :_reduce_159,
  1, 140, :_reduce_160,
  1, 140, :_reduce_161,
  1, 140, :_reduce_162,
  1, 140, :_reduce_163,
  1, 140, :_reduce_164,
  1, 140, :_reduce_165,
  1, 140, :_reduce_166,
  1, 140, :_reduce_167,
  1, 140, :_reduce_168,
  1, 140, :_reduce_169,
  1, 140, :_reduce_170,
  1, 140, :_reduce_171,
  1, 140, :_reduce_172,
  1, 140, :_reduce_173,
  1, 140, :_reduce_174,
  1, 140, :_reduce_175,
  1, 140, :_reduce_176,
  4, 140, :_reduce_177,
  2, 140, :_reduce_178,
  3, 140, :_reduce_179,
  3, 140, :_reduce_180,
  4, 140, :_reduce_181,
  2, 140, :_reduce_182,
  2, 140, :_reduce_183,
  1, 140, :_reduce_none,
  1, 101, :_reduce_185,
  3, 101, :_reduce_186,
  3, 141, :_reduce_187,
  1, 142, :_reduce_188,
  3, 142, :_reduce_189,
  3, 143, :_reduce_190,
  3, 143, :_reduce_191,
  3, 143, :_reduce_192,
  2, 143, :_reduce_193,
  3, 143, :_reduce_194,
  3, 143, :_reduce_195,
  3, 143, :_reduce_196,
  1, 144, :_reduce_none,
  2, 144, :_reduce_198,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  4, 127, :_reduce_203,
  1, 127, :_reduce_204,
  5, 145, :_reduce_205,
  2, 145, :_reduce_206,
  3, 129, :_reduce_207,
  1, 129, :_reduce_208,
  1, 129, :_reduce_none,
  3, 147, :_reduce_210,
  1, 147, :_reduce_211,
  1, 147, :_reduce_none,
  3, 149, :_reduce_213,
  1, 149, :_reduce_214,
  1, 149, :_reduce_none,
  3, 151, :_reduce_216,
  1, 151, :_reduce_217,
  1, 151, :_reduce_none,
  0, 152, :_reduce_219,
  3, 152, :_reduce_220,
  1, 152, :_reduce_221,
  3, 152, :_reduce_222,
  1, 152, :_reduce_223,
  1, 152, :_reduce_224,
  2, 146, :_reduce_225,
  3, 148, :_reduce_226,
  3, 150, :_reduce_227,
  3, 153, :_reduce_228,
  4, 154, :_reduce_229,
  3, 155, :_reduce_230,
  0, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  2, 105, :_reduce_235,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  2, 118, :_reduce_239,
  2, 97, :_reduce_240,
  2, 138, :_reduce_241,
  0, 139, :_reduce_242,
  1, 139, :_reduce_243,
  2, 139, :_reduce_244,
  1, 139, :_reduce_245 ]

racc_reduce_n = 246

racc_shift_n = 415

racc_token_table = {
  false => 0,
  :error => 1,
  :tUIDENT => 2,
  :tLIDENT => 3,
  :tNAMESPACE => 4,
  :tINTERFACEIDENT => 5,
  :tGLOBALIDENT => 6,
  :tLKEYWORD => 7,
  :tUKEYWORD => 8,
  :tLKEYWORD_Q_E => 9,
  :tUKEYWORD_Q_E => 10,
  :tIVAR => 11,
  :tCLASSVAR => 12,
  :tANNOTATION => 13,
  :tSTRING => 14,
  :tSYMBOL => 15,
  :tINTEGER => 16,
  :tWRITE_ATTR => 17,
  :kLPAREN => 18,
  :kRPAREN => 19,
  :kLBRACKET => 20,
  :kRBRACKET => 21,
  :kLBRACE => 22,
  :kRBRACE => 23,
  :kVOID => 24,
  :kNIL => 25,
  :kTRUE => 26,
  :kFALSE => 27,
  :kANY => 28,
  :kUNTYPED => 29,
  :kTOP => 30,
  :kBOT => 31,
  :kSELF => 32,
  :kSELFQ => 33,
  :kINSTANCE => 34,
  :kCLASS => 35,
  :kBOOL => 36,
  :kSINGLETON => 37,
  :kTYPE => 38,
  :kDEF => 39,
  :kMODULE => 40,
  :kPRIVATE => 41,
  :kPUBLIC => 42,
  :kALIAS => 43,
  :kCOLON => 44,
  :kCOLON2 => 45,
  :kCOMMA => 46,
  :kBAR => 47,
  :kAMP => 48,
  :kHAT => 49,
  :kARROW => 50,
  :kQUESTION => 51,
  :kEXCLAMATION => 52,
  :kSTAR => 53,
  :kSTAR2 => 54,
  :kFATARROW => 55,
  :kEQ => 56,
  :kDOT => 57,
  :kDOT3 => 58,
  :kLT => 59,
  :kINTERFACE => 60,
  :kEND => 61,
  :kINCLUDE => 62,
  :kEXTEND => 63,
  :kATTRREADER => 64,
  :kATTRWRITER => 65,
  :kATTRACCESSOR => 66,
  :tOPERATOR => 67,
  :tQUOTEDMETHOD => 68,
  :tQUOTEDIDENT => 69,
  :kPREPEND => 70,
  :kEXTENSION => 71,
  :kINCOMPATIBLE => 72,
  :type_TYPE => 73,
  :type_SIGNATURE => 74,
  :type_METHODTYPE => 75,
  :tEOF => 76,
  :kOUT => 77,
  :kIN => 78,
  :kUNCHECKED => 79,
  :kOVERLOAD => 80 }

racc_nt_base = 81

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "tUIDENT",
  "tLIDENT",
  "tNAMESPACE",
  "tINTERFACEIDENT",
  "tGLOBALIDENT",
  "tLKEYWORD",
  "tUKEYWORD",
  "tLKEYWORD_Q_E",
  "tUKEYWORD_Q_E",
  "tIVAR",
  "tCLASSVAR",
  "tANNOTATION",
  "tSTRING",
  "tSYMBOL",
  "tINTEGER",
  "tWRITE_ATTR",
  "kLPAREN",
  "kRPAREN",
  "kLBRACKET",
  "kRBRACKET",
  "kLBRACE",
  "kRBRACE",
  "kVOID",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kANY",
  "kUNTYPED",
  "kTOP",
  "kBOT",
  "kSELF",
  "kSELFQ",
  "kINSTANCE",
  "kCLASS",
  "kBOOL",
  "kSINGLETON",
  "kTYPE",
  "kDEF",
  "kMODULE",
  "kPRIVATE",
  "kPUBLIC",
  "kALIAS",
  "kCOLON",
  "kCOLON2",
  "kCOMMA",
  "kBAR",
  "kAMP",
  "kHAT",
  "kARROW",
  "kQUESTION",
  "kEXCLAMATION",
  "kSTAR",
  "kSTAR2",
  "kFATARROW",
  "kEQ",
  "kDOT",
  "kDOT3",
  "kLT",
  "kINTERFACE",
  "kEND",
  "kINCLUDE",
  "kEXTEND",
  "kATTRREADER",
  "kATTRWRITER",
  "kATTRACCESSOR",
  "tOPERATOR",
  "tQUOTEDMETHOD",
  "tQUOTEDIDENT",
  "kPREPEND",
  "kEXTENSION",
  "kINCOMPATIBLE",
  "type_TYPE",
  "type_SIGNATURE",
  "type_METHODTYPE",
  "tEOF",
  "kOUT",
  "kIN",
  "kUNCHECKED",
  "kOVERLOAD",
  "$start",
  "target",
  "type",
  "eof",
  "signatures",
  "method_type",
  "signature",
  "type_decl",
  "const_decl",
  "global_decl",
  "interface_decl",
  "module_decl",
  "class_decl",
  "start_new_scope",
  "start_merged_scope",
  "annotations",
  "class_name",
  "module_type_params",
  "super_class",
  "class_members",
  "type_list",
  "colon_module_self_types",
  "module_self_types",
  "module_self_type",
  "qualified_name",
  "class_member",
  "method_member",
  "include_member",
  "extend_member",
  "prepend_member",
  "var_type_member",
  "attribute_member",
  "alias_member",
  "attribute_kind",
  "keyword",
  "method_name",
  "attr_var_opt",
  "interface_name",
  "interface_members",
  "interface_member",
  "overload",
  "attributes",
  "method_kind",
  "def_name",
  "method_types",
  "type_params",
  "proc_type",
  "params_opt",
  "params",
  "block",
  "method_name0",
  "identifier_keywords",
  "module_type_params0",
  "module_type_param",
  "type_param_check",
  "type_param_variance",
  "type_params0",
  "type_alias_name",
  "namespace",
  "simple_type",
  "record_type",
  "record_fields",
  "record_field",
  "keyword_name",
  "simple_function_type",
  "required_positional",
  "optional_positional_params",
  "optional_positional",
  "rest_positional_param",
  "rest_positional",
  "trailing_positional_params",
  "keyword_params",
  "required_keyword",
  "optional_keyword",
  "rest_keyword",
  "var_name_opt",
  "simple_name" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_1(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_2(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_3(val, _values, result)
            result = val[1]

    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_6(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_7(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_14(val, _values, result)
     start_new_variables_scope
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_15(val, _values, result)
     start_merged_variables_scope
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_16(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_17(val, _values, result)
            result = val[1].unshift(Annotation.new(string: val[0].value, location: val[0].location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_18(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[7].location
        result = Declarations::Class.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          super_class: val[5],
          members: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_19(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_20(val, _values, result)
            result = Declarations::Class::Super.new(name: val[1].value,
                                                args: [],
                                                location: val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_21(val, _values, result)
            result = Declarations::Class::Super.new(name: val[1].value,
                                                args: val[3],
                                                location: val[1].location + val[4].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_22(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[7].location
        result = Declarations::Module.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          self_types: val[5],
          members: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 107)
  def _reduce_23(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[6].location
        result = Declarations::Module.new(
          name: val[3].value,
          type_params: Declarations::ModuleTypeParams.empty,
          self_types: val[4],
          members: val[5],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_24(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_25(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_26(val, _values, result)
            result = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_27(val, _values, result)
            result = val[0].push(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_28(val, _values, result)
            name = val[0].value
        args = val[2]
        location = val[0].location + val[3].location

        case
        when name.class?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        when name.interface?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        else
          raise SemanticsError.new("Module self type should be instance or interface", subject: val[0], location: val[0].location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 151)
  def _reduce_29(val, _values, result)
            name = val[0].value
        args = []
        location = val[0].location

        case
        when name.class?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        when name.interface?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        else
          raise SemanticsError.new("Module self type should be instance or interface", subject: val[0], location: val[0].location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_30(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_31(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_38(val, _values, result)
            result = Members::Public.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_39(val, _values, result)
            result = Members::Private.new(location: val[0].location)

    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 188)
  def _reduce_42(val, _values, result)
     result = :instance
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_43(val, _values, result)
     result = :singleton
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_44(val, _values, result)
            location = val[1].location + val[4].location
        result = Members::AttrReader.new(name: val[3].value,
                                         ivar_name: nil,
                                         type: val[4],
                                         kind: val[2],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_45(val, _values, result)
            location = val[1].location + val[6].location
        result = Members::AttrReader.new(name: val[3].value.to_sym,
                                         ivar_name: val[4],
                                         type: val[6],
                                         kind: val[2],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_46(val, _values, result)
            location = val[1].location + val[4].location
        result = Members::AttrWriter.new(name: val[3].value,
                                         ivar_name: nil,
                                         kind: val[2],
                                         type: val[4],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 223)
  def _reduce_47(val, _values, result)
            location = val[1].location + val[6].location
        result = Members::AttrWriter.new(name: val[3].value.to_sym,
                                         ivar_name: val[4],
                                         kind: val[2],
                                         type: val[6],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_48(val, _values, result)
            location = val[1].location + val[4].location
        result = Members::AttrAccessor.new(name: val[3].value,
                                           ivar_name: nil,
                                           kind: val[2],
                                           type: val[4],
                                           annotations: val[0],
                                           location: location,
                                           comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_49(val, _values, result)
            location = val[1].location + val[6].location
        result = Members::AttrAccessor.new(name: val[3].value.to_sym,
                                           ivar_name: val[4],
                                           kind: val[2],
                                           type: val[6],
                                           annotations: val[0],
                                           location: location,
                                           comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 254)
  def _reduce_50(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_51(val, _values, result)
     result = false
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_52(val, _values, result)
     result = val[1].value
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_53(val, _values, result)
            location = val[0].location + val[2].location
        result = Members::InstanceVariable.new(
          name: val[0].value,
          type: val[2],
          location: location,
          comment: leading_comment(location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 269)
  def _reduce_54(val, _values, result)
            type = val[2]

        if type.is_a?(Types::Variable)
          type = Types::ClassInstance.new(
            name: TypeName.new(name: type.name, namespace: Namespace.empty),
            args: [],
            location: type.location
          )
        end

        location = val[0].location + val[2].location
        result = Members::ClassVariable.new(
          name: val[0].value,
          type: type,
          location: location,
          comment: leading_comment(location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_55(val, _values, result)
          type = val[4]

      if type.is_a?(Types::Variable)
        type = Types::ClassInstance.new(
          name: TypeName.new(name: type.name, namespace: Namespace.empty),
          args: [],
          location: type.location
        )
      end

      location = val[0].location + val[4].location
      result = Members::ClassInstanceVariable.new(
        name: val[2].value,
        type: type,
        location: location,
        comment: leading_comment(location)
      )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 309)
  def _reduce_56(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[6].location
        result = Declarations::Interface.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          members: val[5],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_57(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 325)
  def _reduce_58(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_59(val, _values, result)
            unless val[0].kind == :instance
          raise SemanticsError.new("Interface cannot have singleton method", subject: val[0], location: val[0].location)
        end

        if val[0].types.last == :super
          raise SemanticsError.new("Interface method cannot have `super` type", subject: val[0], location: val[0].location)
        end

        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_60(val, _values, result)
            unless val[0].name.interface?
          raise SemanticsError.new("Interface should include an interface", subject: val[0], location: val[0].location)
        end

        result = val[0]

    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'parser.y', 351)
  def _reduce_62(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should include module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Include.new(name: val[2].value,
                                      args: [],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 362)
  def _reduce_63(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should include module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Include.new(name: val[2].value,
                                      args: val[4],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_64(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should extend module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Extend.new(name: val[2].value,
                                     args: [],
                                     annotations: val[0],
                                     location: location,
                                     comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_65(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should extend module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Extend.new(name: val[2].value,
                                     args: val[4],
                                     annotations: val[0],
                                     location: location,
                                     comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 399)
  def _reduce_66(val, _values, result)
            unless val[2].value.class?
          raise SemanticsError.new("Should prepend module", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Prepend.new(name: val[2].value,
                                      args: [],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 410)
  def _reduce_67(val, _values, result)
            unless val[2].value.class?
          raise SemanticsError.new("Should prepend module", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Prepend.new(name: val[2].value,
                                      args: val[4],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 422)
  def _reduce_68(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 424)
  def _reduce_69(val, _values, result)
            RBS.logger.warn "`overload def` syntax is deprecated. Use `...` syntax instead."
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 430)
  def _reduce_70(val, _values, result)
            location = val[3].location + val[6].last.location

        last_type = val[6].last
        if last_type.is_a?(LocatedValue) && last_type.value == :dot3
          overload = true
          val[6].pop
        else
          overload = false
        end

        result = Members::MethodDefinition.new(
          name: val[5].value,
          kind: val[4],
          types: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || val[2]&.location || val[3].location),
          overload: overload || !!val[2]
        )

    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.y', 453)
  def _reduce_72(val, _values, result)
            RBS.logger.warn "`incompatible` method attribute is deprecated and ignored."

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 457)
  def _reduce_73(val, _values, result)
     result = :instance
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 458)
  def _reduce_74(val, _values, result)
     result = :singleton
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 459)
  def _reduce_75(val, _values, result)
     result = :singleton_instance
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 462)
  def _reduce_76(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 463)
  def _reduce_77(val, _values, result)
     result = [LocatedValue.new(value: :dot3, location: val[0].location)]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 465)
  def _reduce_78(val, _values, result)
            result = val[2].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 470)
  def _reduce_79(val, _values, result)
            reset_variable_scope

        location = (val[1] || val[2]).location + val[2].location
        type_params = val[1]&.value || []

        type, block = val[2].value

        result = MethodType.new(type_params: type_params,
                                type: type,
                                block: block,
                                location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 484)
  def _reduce_80(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 486)
  def _reduce_81(val, _values, result)
            result = LocatedValue.new(value: val[1], location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 491)
  def _reduce_82(val, _values, result)
            type, block = val[1].value
        block = Types::Block.new(type: type, block: block, required: true)
        result = LocatedValue.new(value: block, location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 496)
  def _reduce_83(val, _values, result)
            type, block = val[2].value
        block = Types::Block.new(type: type, block: block, required: false)
        result = LocatedValue.new(value: block, location: val[0].location + val[3].location)

    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.y', 504)
  def _reduce_85(val, _values, result)
            result = LocatedValue.new(value: val[0].value.to_sym,
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.y', 513)
  def _reduce_95(val, _values, result)
            unless val[0].location.pred?(val[1].location)
          raise SyntaxError.new(token_str: "kQUESTION", error_value: val[1])
        end

        result = LocatedValue.new(value: "#{val[0].value}?",
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 521)
  def _reduce_96(val, _values, result)
            unless val[0].location.pred?(val[1].location)
          raise SyntaxError.new(token_str: "kEXCLAMATION", error_value: val[1])
        end

        result = LocatedValue.new(value: "#{val[0].value}!",
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.y', 541)
  def _reduce_137(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 543)
  def _reduce_138(val, _values, result)
            val[1].each {|p| insert_bound_variable(p.name) }

        result = LocatedValue.new(value: val[1], location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 550)
  def _reduce_139(val, _values, result)
            result = Declarations::ModuleTypeParams.new()
        result.add(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 554)
  def _reduce_140(val, _values, result)
            result = val[0].add(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 559)
  def _reduce_141(val, _values, result)
            result = Declarations::ModuleTypeParams::TypeParam.new(name: val[2].value.to_sym,
                                                               variance: val[1],
                                                               skip_validation: val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 565)
  def _reduce_142(val, _values, result)
     result = :invariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 566)
  def _reduce_143(val, _values, result)
     result = :covariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 567)
  def _reduce_144(val, _values, result)
     result = :contravariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 570)
  def _reduce_145(val, _values, result)
     result = false
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 571)
  def _reduce_146(val, _values, result)
     result = true
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 574)
  def _reduce_147(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 576)
  def _reduce_148(val, _values, result)
            val[1].each {|var| insert_bound_variable(var) }

        result = LocatedValue.new(value: val[1],
                                  location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 584)
  def _reduce_149(val, _values, result)
            result = [val[0].value.to_sym]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 587)
  def _reduce_150(val, _values, result)
            result = val[0].push(val[2].value.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 592)
  def _reduce_151(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::Alias.new(
          new_name: val[2].value.to_sym,
          old_name: val[3].value.to_sym,
          kind: :instance,
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 603)
  def _reduce_152(val, _values, result)
            location = val[1].location + val[7].location
        result = Members::Alias.new(
          new_name: val[4].value.to_sym,
          old_name: val[7].value.to_sym,
          kind: :singleton,
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 616)
  def _reduce_153(val, _values, result)
            location = val[1].location + val[4].location
        result = Declarations::Alias.new(name: val[2].value,
                                         type: val[4],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 626)
  def _reduce_154(val, _values, result)
            location = val[0].location + val[2].location
        result = Declarations::Constant.new(name: val[0].value,
                                            type: val[2],
                                            location: location,
                                            comment: leading_comment(location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 633)
  def _reduce_155(val, _values, result)
            location = (val[0] || val[1]).location + val[2].location
        name = TypeName.new(name: val[1].value, namespace: val[0]&.value || Namespace.empty)
        result = Declarations::Constant.new(name: name,
                                            type: val[2],
                                            location: location,
                                            comment: leading_comment(location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 643)
  def _reduce_156(val, _values, result)
            location = val[0].location + val[2].location
        result = Declarations::Global.new(name: val[0].value.to_sym,
                                          type: val[2],
                                          location: location,
                                          comment: leading_comment(location))

    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.y', 653)
  def _reduce_158(val, _values, result)
            types = case l = val[0]
                when Types::Union
                  l.types + [val[2]]
                else
                  [l, val[2]]
                end

        result = Types::Union.new(types: types, location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 663)
  def _reduce_159(val, _values, result)
            types = case l = val[0]
                when Types::Intersection
                  l.types + [val[2]]
                else
                  [l, val[2]]
                end

        result = Types::Intersection.new(types: types,
                                         location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 676)
  def _reduce_160(val, _values, result)
            result = Types::Bases::Void.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 679)
  def _reduce_161(val, _values, result)
            RBS.logger.warn "`any` type is deprecated. Use `untyped` instead. (#{val[0].location.to_s})"
        result = Types::Bases::Any.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 683)
  def _reduce_162(val, _values, result)
            result = Types::Bases::Any.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 686)
  def _reduce_163(val, _values, result)
            result = Types::Bases::Bool.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 689)
  def _reduce_164(val, _values, result)
            result = Types::Bases::Nil.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 692)
  def _reduce_165(val, _values, result)
            result = Types::Bases::Top.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 695)
  def _reduce_166(val, _values, result)
            result = Types::Bases::Bottom.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 698)
  def _reduce_167(val, _values, result)
            result = Types::Bases::Self.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 701)
  def _reduce_168(val, _values, result)
            result = Types::Optional.new(type: Types::Bases::Self.new(location: val[0].location),
                                     location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 705)
  def _reduce_169(val, _values, result)
            result = Types::Bases::Instance.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 708)
  def _reduce_170(val, _values, result)
            result = Types::Bases::Class.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 711)
  def _reduce_171(val, _values, result)
            result = Types::Literal.new(literal: true, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 714)
  def _reduce_172(val, _values, result)
            result = Types::Literal.new(literal: false, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 717)
  def _reduce_173(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 720)
  def _reduce_174(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 723)
  def _reduce_175(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 726)
  def _reduce_176(val, _values, result)
            name = val[0].value
        args = []
        location = val[0].location

        case
        when name.class?
          if is_bound_variable?(name.name)
            result = Types::Variable.new(name: name.name, location: location)
          else
            result = Types::ClassInstance.new(name: name, args: args, location: location)
          end
        when name.alias?
          result = Types::Alias.new(name: name, location: location)
        when name.interface?
          result = Types::Interface.new(name: name, args: args, location: location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 744)
  def _reduce_177(val, _values, result)
            name = val[0].value
        args = val[2]
        location = val[0].location + val[3].location

        case
        when name.class?
          if is_bound_variable?(name.name)
            raise SemanticsError.new("#{name.name} is type variable and cannot be applied", subject: name, location: location)
          end
          result = Types::ClassInstance.new(name: name, args: args, location: location)
        when name.interface?
          result = Types::Interface.new(name: name, args: args, location: location)
        else
          raise SyntaxError.new(token_str: "kLBRACKET", error_value: val[1])
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 761)
  def _reduce_178(val, _values, result)
            location = val[0].location + val[1].location
        result = Types::Tuple.new(types: [], location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 765)
  def _reduce_179(val, _values, result)
            location = val[0].location + val[2].location
        types = val[1]
        result = Types::Tuple.new(types: types, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 770)
  def _reduce_180(val, _values, result)
            type = val[1].dup
        type.instance_eval do
          @location = val[0].location + val[2].location
        end
        result = type

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 777)
  def _reduce_181(val, _values, result)
            result = Types::ClassSingleton.new(name: val[2].value,
                                           location: val[0].location + val[3].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 781)
  def _reduce_182(val, _values, result)
            type, block = val[1].value
        result = Types::Proc.new(type: type, block: block, location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 785)
  def _reduce_183(val, _values, result)
            result = Types::Optional.new(type: val[0], location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 184 omitted

module_eval(<<'.,.,', 'parser.y', 791)
  def _reduce_185(val, _values, result)
            result = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 794)
  def _reduce_186(val, _values, result)
            result = val[0] + [val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 799)
  def _reduce_187(val, _values, result)
            result = Types::Record.new(
          fields: val[1],
          location: val[0].location + val[2].location
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 807)
  def _reduce_188(val, _values, result)
            result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_189(val, _values, result)
            result = val[0].merge!(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 815)
  def _reduce_190(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 818)
  def _reduce_191(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 821)
  def _reduce_192(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 824)
  def _reduce_193(val, _values, result)
            result = { val[0].value => val[1] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 827)
  def _reduce_194(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 830)
  def _reduce_195(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 833)
  def _reduce_196(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

# reduce 197 omitted

module_eval(<<'.,.,', 'parser.y', 839)
  def _reduce_198(val, _values, result)
            result = val[0]

    result
  end
.,.,

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

module_eval(<<'.,.,', 'parser.y', 846)
  def _reduce_203(val, _values, result)
            location = (val[0] || val[1] || val[2]).location + val[3].location

        params = val[0]&.value || [[], [], nil, [], {}, {}, nil]

        type = Types::Function.new(
          required_positionals: params[0],
          optional_positionals: params[1],
          rest_positionals: params[2],
          trailing_positionals: params[3],
          required_keywords: params[4],
          optional_keywords: params[5],
          rest_keywords: params[6],
          return_type: val[3]
        )

        block = val[1].value

        result = LocatedValue.new(value: [type, block], location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 866)
  def _reduce_204(val, _values, result)
            result = LocatedValue.new(value: [val[0].value, nil], location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 871)
  def _reduce_205(val, _values, result)
            location = val[0].location + val[4].location
        type = Types::Function.new(
          required_positionals: val[1][0],
          optional_positionals: val[1][1],
          rest_positionals: val[1][2],
          trailing_positionals: val[1][3],
          required_keywords: val[1][4],
          optional_keywords: val[1][5],
          rest_keywords: val[1][6],
          return_type: val[4],
        )

        result = LocatedValue.new(value: type, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 886)
  def _reduce_206(val, _values, result)
            location = val[0].location + val[1].location
        type = Types::Function.new(
          required_positionals: [],
          optional_positionals: [],
          rest_positionals: nil,
          trailing_positionals: [],
          required_keywords: {},
          optional_keywords: {},
          rest_keywords: nil,
          return_type: val[1]
        )

        result = LocatedValue.new(value: type, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 903)
  def _reduce_207(val, _values, result)
            result = val[2]
        result[0].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 907)
  def _reduce_208(val, _values, result)
            result = empty_params_result
        result[0].unshift(val[0])

    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'parser.y', 914)
  def _reduce_210(val, _values, result)
            result = val[2]
        result[1].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 918)
  def _reduce_211(val, _values, result)
            result = empty_params_result
        result[1].unshift(val[0])

    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'parser.y', 925)
  def _reduce_213(val, _values, result)
            result = val[2]
        result[2] = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 929)
  def _reduce_214(val, _values, result)
            result = empty_params_result
        result[2] = val[0]

    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'parser.y', 936)
  def _reduce_216(val, _values, result)
            result = val[2]
        result[3].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 940)
  def _reduce_217(val, _values, result)
            result = empty_params_result
        result[3].unshift(val[0])

    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'parser.y', 947)
  def _reduce_219(val, _values, result)
            result = empty_params_result

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 950)
  def _reduce_220(val, _values, result)
            result = val[2]
        result[4].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 954)
  def _reduce_221(val, _values, result)
            result = empty_params_result
        result[4].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 958)
  def _reduce_222(val, _values, result)
            result = val[2]
        result[5].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 962)
  def _reduce_223(val, _values, result)
            result = empty_params_result
        result[5].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 966)
  def _reduce_224(val, _values, result)
            result = empty_params_result
        result[6] = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 972)
  def _reduce_225(val, _values, result)
            result = Types::Function::Param.new(type: val[0],
                                            name: val[1]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 978)
  def _reduce_226(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 984)
  def _reduce_227(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 990)
  def _reduce_228(val, _values, result)
            param = Types::Function::Param.new(type: val[1],
                                           name: val[2]&.value&.to_sym)
        result = { val[0].value => param }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 997)
  def _reduce_229(val, _values, result)
            param = Types::Function::Param.new(type: val[2],
                                           name: val[3]&.value&.to_sym)
        result = { val[1].value => param }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1004)
  def _reduce_230(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

module_eval(<<'.,.,', 'parser.y', 1013)
  def _reduce_235(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

module_eval(<<'.,.,', 'parser.y', 1025)
  def _reduce_239(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1034)
  def _reduce_240(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1043)
  def _reduce_241(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1053)
  def _reduce_242(val, _values, result)
            result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1056)
  def _reduce_243(val, _values, result)
            result = LocatedValue.new(value: Namespace.root, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1059)
  def _reduce_244(val, _values, result)
            namespace = Namespace.parse(val[1].value).absolute!
        result = LocatedValue.new(value: namespace, location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1063)
  def _reduce_245(val, _values, result)
            namespace = Namespace.parse(val[0].value)
        result = LocatedValue.new(value: namespace, location: val[0].location)

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module RBS


