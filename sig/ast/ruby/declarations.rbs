module RBS
  module AST
    module Ruby
      module Declarations
        # Possible top level declarations
        type t = ClassDecl | ModuleDecl | ConstantDecl | GlobalDecl | RBSDecl

        class Base
          attr_reader buffer: Buffer

          def initialize: (Buffer) -> void

          def constant_as_type_name: (Prism::node?) -> TypeName?

          def rbs_location: (Prism::Location) -> Location
        end

        # Returns `AST::TypeParam` objects from given `generic` annotations
        #
        # Note that `locations` in the returned objects may be `nil`.
        # You can use the `type_param_annotations` directly for location aware operations.
        #
        class GenericsTypeParams
          attr_reader annotations: Array[Annotation::GenericAnnotation]

          attr_reader type_params: Array[AST::TypeParam]

          def initialize: (Array[Annotation::GenericAnnotation]) -> void

          def self.build: (Array[Annotation::leading_annotation]) -> [instance, Array[Annotation::leading_annotation]]

          def param_names: () -> Array[Symbol]

          def map_type_name: () { (TypeName) -> TypeName } -> self
        end

        class ClassDecl < Base
          class SuperNode
            attr_reader class_name: TypeName

            attr_reader class_name_location: Location

            attr_reader type_args: Array[Types::t]

            attr_reader open_paren_location: Location?

            attr_reader close_paren_location: Location?

            attr_reader location: Location

            def initialize: (
              class_name: TypeName,
              type_args: Array[Types::t],
              location: Location,
              class_name_location: Location,
              open_paren_location: Location?,
              close_paren_location: Location?
            ) -> void

            def map_type_name: () { (TypeName) -> TypeName } -> self

            alias name class_name

            alias args type_args
          end

          class SuperAnnotation
            attr_reader class_name: TypeName

            attr_reader type_args: Array[Types::t]

            attr_reader annotation: Annotation::InheritsAnnotation

            def initialize: (
              TypeName,
              Array[Types::t],
              Annotation::InheritsAnnotation
            ) -> void

            def map_type_name: () { (TypeName) -> TypeName } -> self

            alias name class_name

            alias args type_args

            def self.build: (Array[Annotation::leading_annotation]) -> [instance?, Array[Annotation::leading_annotation]]

            # Returns the location in the source code
            #
            # Calculated based on `#annotation` and `#block`.
            #
            def location: () -> Location
          end

          type member = Members::t | t | SingletonClassDecl

          attr_reader node: Prism::ClassNode

          attr_reader location: Location

          attr_reader class_name: TypeName

          alias name class_name

          attr_reader class_name_location: Location

          attr_reader generics: GenericsTypeParams

          attr_reader members: Array[member]

          attr_reader super_annotation: SuperAnnotation?

          attr_reader super_node: SuperNode?

          def initialize: (
            Buffer,
            Prism::ClassNode,
            location: Location,
            class_name: TypeName,
            class_name_location: Location,
            generics: GenericsTypeParams,
            super_node: SuperNode?,
            super_annotation: SuperAnnotation?
          ) -> void

          def type_params: () -> Array[AST::TypeParam]

          def each_member: () { (Members::t) -> void } -> void
                         | () -> Enumerator[Members::t]

          def each_decl: () { (t | SingletonClassDecl) -> void } -> void
                       | () -> Enumerator[t | SingletonClassDecl]

          def super_class: () -> (SuperNode | SuperAnnotation | nil)
        end

        # `class <<self` definition
        #
        # This is only allowed inside class or module definition.
        #
        class SingletonClassDecl < Base
          type member = Members::t

          attr_reader node: Prism::SingletonClassNode

          attr_reader members: Array[member]

          def location: () -> Location

          def initialize: (Buffer, Prism::SingletonClassNode) -> void
        end

        class ModuleDecl < Base
          class SelfConstraint
            attr_reader name: TypeName

            attr_reader args: Array[Types::t]

            attr_reader annotation: Annotation::ModuleSelfAnnotation

            def location: () -> Location

            def initialize: (TypeName, Array[Types::t], Annotation::ModuleSelfAnnotation) -> void

            # Note that type names in `annotation` doesn't update
            #
            def map_type_name: () { (TypeName) -> TypeName } -> self

            def self.build: (Array[Annotation::leading_annotation]) -> [Array[instance], Array[Annotation::leading_annotation]]
          end

          type member = Members::t | t | SingletonClassDecl

          attr_reader node: Prism::ModuleNode

          attr_reader location: Location

          attr_reader module_name: TypeName

          attr_reader module_name_location: Location

          attr_reader generics: GenericsTypeParams

          attr_reader self_constraints: Array[SelfConstraint]

          attr_reader members: Array[member]

          alias name module_name

          def initialize: (
            Buffer,
            Prism::ModuleNode,
            location: Location,
            module_name: TypeName,
            module_name_location: Location,
            generics: GenericsTypeParams,
            self_constraints: Array[SelfConstraint]
          ) -> void

          def type_params: () -> Array[AST::TypeParam]

          def self_types: () -> Array[SelfConstraint]

          def each_member: () { (Members::t) -> void } -> void
                         | () -> Enumerator[Members::t]

          def each_decl: () { (t | SingletonClassDecl) -> void } -> void
                         | () -> Enumerator[t | SingletonClassDecl]
        end

        class ConstantDecl < Base
          attr_reader node: Prism::ConstantWriteNode

          def initialize: (Buffer, Prism::ConstantWriteNode) -> void

          # Returns the type of the constant
          def type: () -> Types::t

          def location: () -> Location
        end

        class GlobalDecl < Base
          attr_reader node: Prism::GlobalVariableWriteNode

          attr_reader location: Location
        end

        class RBSDecl < Base
          attr_reader location: Location
        end
      end
    end
  end
end
