module RBS
  module AST
    module Ruby
      module Members
        class Base
          attr_reader buffer: Buffer

          def initialize: (Buffer) -> void

          include Helpers::ConstantHelper
        end

        type t = DefMember | DefSingletonMember
               | AliasMember
               | IncludeMember | ExtendMember | PrependMember
               | AttrReaderMember | AttrWriterMember | AttrAccessorMember
               | PublicMember | PrivateMember
               | InstanceVariableMember | ClassVariableMember | ClassInstanceVariableMember

        class Overload
          attr_reader annotations: Array[AST::Annotation]
          attr_reader method_type: MethodType

          def initialize: (MethodType, Array[AST::Annotation]) -> void
        end

        class DefAnnotations
          class DocStyleTypeAnnotations
            type return_type_annotation = Annotation::NodeTypeAssertion | Annotation::ReturnTypeAnnotation

            attr_reader return_type_annotation: return_type_annotation?

            attr_reader param_type_annotations: Hash[Symbol, Annotation::ParamTypeAnnotation]

            attr_reader splat_type_annotation: Annotation::SplatParamTypeAnnotation?

            attr_reader kwsplat_type_annotation: Annotation::DoubleSplatParamTypeAnnotation?

            attr_reader block_type_annotation: Annotation::BlockParamTypeAnnotation?

            def initialize: (
              return_type_annotation: return_type_annotation?,
              param_type_annotations: Hash[Symbol, Annotation::ParamTypeAnnotation],
              splat_type_annotation: Annotation::SplatParamTypeAnnotation?,
              kwsplat_type_annotation: Annotation::DoubleSplatParamTypeAnnotation?,
              block_type_annotation: Annotation::BlockParamTypeAnnotation?
            ) -> void

            def self.empty: () -> DocStyleTypeAnnotations

            def map_type_name: { (TypeName) -> TypeName } -> self

            # In-place update
            def update!: (
              ?return_type_annotation: return_type_annotation?,
              ?splat_type_annotation: Annotation::SplatParamTypeAnnotation?,
              ?kwsplat_type_annotation: Annotation::DoubleSplatParamTypeAnnotation?,
              ?block_type_annotation: Annotation::BlockParamTypeAnnotation?
            ) -> void

            def construct_method_type: (Prism::ParametersNode?) -> MethodType

            def empty?: () -> bool
          end

          type type_annotations = DocStyleTypeAnnotations | Array[Annotation::ColonMethodTypeAnnotation | Annotation::MethodTypesAnnotation] | nil

          attr_reader type_annotations: type_annotations

          attr_reader annotations: Array[Annotation::RBSAnnotationAnnotation]

          attr_reader override: Annotation::OverrideAnnotation?

          def initialize: (
            type_annotations: type_annotations,
            annotations: Array[Annotation::RBSAnnotationAnnotation],
            override: Annotation::OverrideAnnotation?
          ) -> void

          def map_type_name: { (TypeName) -> TypeName } -> self

          # Returns the method type annotations from the comment block
          #
          # Returns a tuple of `DefAnnotations` object, array of unused leading annotations, and unused trailing annotation.
          #
          def self.build: (CommentBlock? leading_block, CommentBlock? trailing_block, Array[Symbol]) -> [
            DefAnnotations,
            Array[Annotation::leading_annotation | CommentBlock::AnnotationSyntaxError],
            Annotation::trailing_annotation | CommentBlock::AnnotationSyntaxError | nil
          ]

          # Returns `true` if it doesn't have any annotation
          def empty?: () -> bool
        end

        type visibility = :public | :private | nil

        class DefMember < Base
          attr_reader node: Prism::DefNode

          attr_reader name: Symbol

          attr_reader inline_annotations: DefAnnotations

          attr_reader visibility: visibility

          def initialize: (Buffer, Prism::DefNode, name: Symbol, inline_annotations: DefAnnotations, visibility: visibility) -> void

          # Returns the overload of the method
          #
          # Note that the `#location` of the objects obtained from this method may be `nil`.
          #
          # * For types that comes from the source code, the type has `location`
          # * For types that are inferred, the type does not have `location`
          # * Other intermediate components doesn't have `location`
          #
          def overloads: () -> Array[Overload]

          def override?: () -> bool

          def annotations: () -> Array[AST::Annotation]

          def map_type_name: () { (TypeName) -> TypeName } -> self

          def location: () -> Location

          def name_location: () -> Location
        end

        class DefSingletonMember < Base
          attr_reader buffer: Buffer

          attr_reader name: Symbol

          attr_reader node: Prism::DefNode

          attr_reader inline_annotations: DefAnnotations

          attr_reader visibility: visibility

          def initialize: (Buffer, Prism::DefNode, name: Symbol, inline_annotations: DefAnnotations, visibility: visibility) -> void

          def overloads: () -> Array[Overload]

          def override?: () -> bool

          # Returns true if the receiver is `self`
          def self?: () -> bool

          def annotations: () -> Array[AST::Annotation]

          def location: () -> Location

          def map_type_name: () { (TypeName) -> TypeName } -> self
        end

        class AliasMember < Base
          attr_reader node: Prism::AliasMethodNode

          def initialize: (Buffer, Prism::AliasMethodNode) -> void

          def location: () -> Location

          def new_name: () -> Symbol

          def old_name: () -> Symbol
        end

        # include, extend, and prepend
        #
        # ```rb
        # include Foo #[Integer, String]
        # #       ^^^                      module_name_location
        # #            ^                   open_paran_location
        # #             ^^^^^^^            (type_args[0])
        # #                    ^           colon_locations[0]
        # #                      ^^^^^^    (type_args[1])
        # #                            ^   close_paren_location
        # ```
        #
        class MixinMember < Base
          attr_reader location: Location

          attr_reader module_name: TypeName

          attr_reader module_name_location: Location

          attr_reader open_paren_location: Location?

          attr_reader close_paren_location: Location?

          # Type arguments for mixin
          attr_reader type_args: Array[Types::t]

          def initialize: (
            Buffer,
            Prism::CallNode,
            location: Location,
            module_name: TypeName,
            type_args: Array[Types::t],
            module_name_location: Location,
            open_paren_location: Location?,
            close_paren_location: Location?
          ) -> void

          attr_reader node: Prism::CallNode

          def map_type_name: () { (TypeName) -> TypeName } -> self
        end

        class IncludeMember < MixinMember
        end

        class ExtendMember < MixinMember
        end

        class PrependMember < MixinMember
        end

        class AttributeMember < Base
          attr_reader node: Prism::CallNode

          attr_reader name: Symbol

          attr_reader annotation: Annotation::NodeTypeAssertion?

          def initialize: (Buffer, Prism::CallNode, Symbol name, Annotation::NodeTypeAssertion?) -> void

          def location: () -> Location
        end

        class AttrReaderMember < AttributeMember
        end

        class AttrWriterMember < AttributeMember
        end

        class AttrAccessorMember < AttributeMember
        end

        class VisibilityMember < Base
          attr_reader node: Prism::CallNode

          def initialize: (Buffer, Prism::CallNode) -> void

          def location: () -> Location
        end

        class PublicMember < VisibilityMember
        end

        class PrivateMember < VisibilityMember
        end

        class InstanceVariableMember < Base
          attr_reader name: Symbol

          attr_reader type: Types::t

          attr_reader annotation: Annotation::IvarTypeAnnotation

          def initialize: (Buffer, Symbol, Types::t, Annotation::IvarTypeAnnotation) -> void

          def location: () -> Location

          def map_type_name: () { (TypeName) -> TypeName } -> self
        end

        class ClassVariableMember < Base
          attr_reader name: Symbol

          attr_reader type: Types::t

          attr_reader annotation: Annotation::ClassVarTypeAnnotation

          def initialize: (Buffer, Symbol, Types::t, Annotation::ClassVarTypeAnnotation) -> void

          def location: () -> Location

          def map_type_name: () { (TypeName) -> TypeName } -> self
        end

        class ClassInstanceVariableMember < Base
          attr_reader name: Symbol

          attr_reader type: Types::t

          attr_reader annotation: Annotation::ClassIvarTypeAnnotation

          def initialize: (Buffer, Symbol, Types::t, Annotation::ClassIvarTypeAnnotation) -> void

          def location: () -> Location

          def map_type_name: () { (TypeName) -> TypeName } -> self
        end
      end
    end
  end
end
