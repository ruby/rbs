module RBS
  module AST
    module Ruby
      module Members
        class Base
          attr_reader buffer: Buffer

          def initialize: (Buffer) -> void

          include Helpers::ConstantHelper
        end

        type t = DefMember | DefSingletonMember
               | AliasMember
               | IncludeMember | ExtendMember | PrependMember
               | AttrReaderMember | AttrWriterMember | AttrAccessorMember
               | PublicMember | PrivateMember

        class Overload
          attr_reader annotations: Array[AST::Annotation]
          attr_reader method_type: MethodType

          def initialize: (MethodType, Array[AST::Annotation]) -> void
        end

        class DefMember < Base
          attr_reader node: Prism::DefNode

          def initialize: (Prism::DefNode) -> void

          def overloads: () -> Array[Overload]

          def name: () -> Symbol

          def annotations: () -> Array[AST::Annotation]
        end

        class DefSingletonMember < Base
          attr_reader node: Prism::DefNode

          def initialize: (Prism::DefNode) -> void

          def overloads: () -> Array[Overload]

          def name: () -> Symbol

          # Returns true if the receiver is `self`
          def self?: () -> bool

          def annotations: () -> Array[AST::Annotation]
        end

        class AliasMember < Base
          attr_reader node: Prism::AliasMethodNode

          def initialize: (Prism::AliasMethodNode) -> void
        end

        # include, extend, and prepend
        #
        # ```rb
        # include Foo #[Integer, String]
        # #       ^^^                      module_name_location
        # #            ^                   open_paran_location
        # #             ^^^^^^^            (type_args[0])
        # #                    ^           colon_locations[0]
        # #                      ^^^^^^    (type_args[1])
        # #                            ^   close_paren_location
        # ```
        #
        class MixinMember < Base
          attr_reader location: Location

          attr_reader module_name: TypeName

          attr_reader module_name_location: Location

          attr_reader open_paren_location: Location?

          attr_reader close_paren_location: Location?

          # Type arguments for mixin
          attr_reader type_args: Array[Types::t]

          # Locations of colons just after type_args[i]
          attr_reader args_separator_locations: Array[Location]

          def initialize: (
            Buffer,
            Prism::CallNode,
            location: Location,
            module_name: TypeName,
            type_args: Array[Types::t],
            module_name_location: Location,
            open_paren_location: Location?,
            args_separator_locations: Array[Location],
            close_paren_location: Location?
          ) -> void

          attr_reader node: Prism::CallNode

          def map_type_name: () { (TypeName) -> TypeName } -> self
        end

        class IncludeMember < MixinMember
        end

        class ExtendMember < MixinMember
        end

        class PrependMember < MixinMember
        end

        class AttrReaderMember < Base
          attr_reader node: Prism::CallNode

          def initialize: (Prism::CallNode) -> void
        end

        class AttrWriterMember < Base
          attr_reader node: Prism::CallNode

          def initialize: (Prism::CallNode) -> void
        end

        class AttrAccessorMember < Base
          attr_reader node: Prism::CallNode

          def initialize: (Prism::CallNode) -> void
        end

        class VisibilityMember < Base
          attr_reader node: Prism::CallNode

          def initialize: (Buffer, Prism::CallNode) -> void

          def location: () -> Location
        end

        class PublicMember < VisibilityMember
        end

        class PrivateMember < VisibilityMember
        end
      end
    end
  end
end
