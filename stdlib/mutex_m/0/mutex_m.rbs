# <!-- rdoc-file=lib/mutex_m.rb -->
# # mutex_m.rb
#
# When 'mutex_m' is required, any object that extends or includes Mutex_m will
# be treated like a Mutex.
#
# Start by requiring the standard library Mutex_m:
#
#     require "mutex_m.rb"
#
# From here you can extend an object with Mutex instance methods:
#
#     obj = Object.new
#     obj.extend Mutex_m
#
# Or mixin Mutex_m into your module to your class inherit Mutex instance methods
# --- remember to call super() in your class initialize method.
#
#     class Foo
#       include Mutex_m
#       def initialize
#         # ...
#         super()
#       end
#       # ...
#     end
#     obj = Foo.new
#     # this obj can be handled like Mutex
#
module Mutex_m
  def self.append_features: (Module cl) -> untyped

  def self.define_aliases: (Module cl) -> untyped

  def self.extend_object: (Object obj) -> untyped

  public

  def mu_extended: () -> untyped

  # <!--
  #   rdoc-file=lib/mutex_m.rb
  #   - mu_lock()
  # -->
  # See Thread::Mutex#lock
  #
  def mu_lock: () -> Thread::Mutex

  # <!--
  #   rdoc-file=lib/mutex_m.rb
  #   - mu_locked?()
  # -->
  # See Thread::Mutex#locked?
  #
  def mu_locked?: () -> bool

  # <!--
  #   rdoc-file=lib/mutex_m.rb
  #   - mu_synchronize(&block)
  # -->
  # See Thread::Mutex#synchronize
  #
  def mu_synchronize: [T] () { () -> T } -> T

  # <!--
  #   rdoc-file=lib/mutex_m.rb
  #   - mu_try_lock()
  # -->
  # See Thread::Mutex#try_lock
  #
  def mu_try_lock: () -> bool

  # <!--
  #   rdoc-file=lib/mutex_m.rb
  #   - mu_unlock()
  # -->
  # See Thread::Mutex#unlock
  #
  def mu_unlock: () -> Thread::Mutex

  # <!--
  #   rdoc-file=lib/mutex_m.rb
  #   - sleep(timeout = nil)
  # -->
  # See Thread::Mutex#sleep
  #
  def sleep: (?Numeric timeout) -> Integer?

  alias locked? mu_locked?

  alias lock mu_lock

  alias unlock mu_unlock

  alias try_lock mu_try_lock

  alias synchronize mu_synchronize

  private

  def initialize: (*untyped args) -> void

  def mu_initialize: () -> untyped
end

Mutex_m::VERSION: String
