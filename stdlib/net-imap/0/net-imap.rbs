# [`Net::IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) implements
# Internet Message Access Protocol
# ([`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html)) client
# functionality. The protocol is described in [IMAP].
#
# ## [`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) Overview
#
# An [`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) client connects
# to a server, and then authenticates itself using either
# [`authenticate()`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#method-i-authenticate)
# or
# [`login()`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#method-i-login).
# Having authenticated itself, there is a range of commands available to it.
# Most work with mailboxes, which may be arranged in an hierarchical namespace,
# and each of which contains zero or more messages. How this is implemented on
# the server is implementation-dependent; on a UNIX server, it will frequently
# be implemented as files in mailbox format within a hierarchy of directories.
#
# To work on the messages within a mailbox, the client must first select that
# mailbox, using either
# [`select()`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#method-i-select)
# or (for read-only access)
# [`examine()`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#method-i-examine).
# Once the client has successfully selected a mailbox, they enter *selected*
# state, and that mailbox becomes the *current* mailbox, on which mail-item
# related commands implicitly operate.
#
# Messages have two sorts of identifiers: message sequence numbers and UIDs.
#
# Message sequence numbers number messages within a mailbox from 1 up to the
# number of items in the mailbox. If a new message arrives during a session, it
# receives a sequence number equal to the new size of the mailbox. If messages
# are expunged from the mailbox, remaining messages have their sequence numbers
# "shuffled down" to fill the gaps.
#
# UIDs, on the other hand, are permanently guaranteed not to identify another
# message within the same mailbox, even if the existing message is deleted. UIDs
# are required to be assigned in ascending (but not necessarily sequential)
# order within a mailbox; this means that if a non-IMAP client rearranges the
# order of mailitems within a mailbox, the UIDs have to be reassigned. An
# [`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) client thus cannot
# rearrange message orders.
#
# ## Examples of Usage
#
# ### List sender and subject of all recent messages in the default mailbox
#
# ```ruby
# imap = Net::IMAP.new('mail.example.com')
# imap.authenticate('LOGIN', 'joe_user', 'joes_password')
# imap.examine('INBOX')
# imap.search(["RECENT"]).each do |message_id|
#   envelope = imap.fetch(message_id, "ENVELOPE")[0].attr["ENVELOPE"]
#   puts "#{envelope.from[0].name}: \t#{envelope.subject}"
# end
# ```
#
# ### Move all messages from April 2003 from "Mail/sent-mail" to "Mail/sent-apr03"
#
# ```ruby
# imap = Net::IMAP.new('mail.example.com')
# imap.authenticate('LOGIN', 'joe_user', 'joes_password')
# imap.select('Mail/sent-mail')
# if not imap.list('Mail/', 'sent-apr03')
#   imap.create('Mail/sent-apr03')
# end
# imap.search(["BEFORE", "30-Apr-2003", "SINCE", "1-Apr-2003"]).each do |message_id|
#   imap.copy(message_id, "Mail/sent-apr03")
#   imap.store(message_id, "+FLAGS", [:Deleted])
# end
# imap.expunge
# ```
#
# ## [`Thread`](https://docs.ruby-lang.org/en/2.7.0/Thread.html) Safety
#
# [`Net::IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) supports
# concurrent threads. For example,
#
# ```ruby
# imap = Net::IMAP.new("imap.foo.net", "imap2")
# imap.authenticate("cram-md5", "bar", "password")
# imap.select("inbox")
# fetch_thread = Thread.start { imap.fetch(1..-1, "UID") }
# search_result = imap.search(["BODY", "hello"])
# fetch_result = fetch_thread.value
# imap.disconnect
# ```
#
# This script invokes the FETCH command and the SEARCH command concurrently.
#
# ## Errors
#
# An [`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) server can send
# three different types of responses to indicate failure:
#
# NO
# :   the attempted command could not be successfully completed. For instance,
#     the username/password used for logging in are incorrect; the selected
#     mailbox does not exist; etc.
#
# BAD
# :   the request from the client does not follow the server's understanding of
#     the [`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) protocol.
#     This includes attempting commands from the wrong client state; for
#     instance, attempting to perform a SEARCH command without having SELECTed a
#     current mailbox. It can also signal an internal server failure (such as a
#     disk crash) has occurred.
#
# BYE
# :   the server is saying goodbye. This can be part of a normal logout
#     sequence, and can be used as part of a login sequence to indicate that the
#     server is (for some reason) unwilling to accept your connection. As a
#     response to any other command, it indicates either that the server is
#     shutting down, or that the server is timing out the client connection due
#     to inactivity.
#
#
# These three error response are represented by the errors
# [`Net::IMAP::NoResponseError`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/NoResponseError.html),
# [`Net::IMAP::BadResponseError`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BadResponseError.html),
# and
# [`Net::IMAP::ByeResponseError`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/ByeResponseError.html),
# all of which are subclasses of
# [`Net::IMAP::ResponseError`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/ResponseError.html).
# Essentially, all methods that involve sending a request to the server can
# generate one of these errors. Only the most pertinent instances have been
# documented below.
#
# Because the [`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) class
# uses Sockets for communication, its methods are also susceptible to the
# various errors that can occur when working with sockets. These are generally
# represented as [`Errno`](https://docs.ruby-lang.org/en/2.7.0/Errno.html)
# errors. For instance, any method that involves sending a request to the server
# and/or receiving a response from it could raise an Errno::EPIPE error if the
# network connection unexpectedly goes down. See the socket(7), ip(7), tcp(7),
# socket(2), connect(2), and associated man pages.
#
# Finally, a
# [`Net::IMAP::DataFormatError`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/DataFormatError.html)
# is thrown if low-level data is found to be in an incorrect format (for
# instance, when converting between UTF-8 and UTF-16), and
# [`Net::IMAP::ResponseParseError`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/ResponseParseError.html)
# is thrown if a server response is non-parseable.
#
# ## References
#
#     1.  Crispin, "INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1",
#
#     RFC 2060, December 1996. (Note: since obsoleted by RFC 3501)
#
# [LANGUAGE-TAGS]
# :   Alvestrand, H., "Tags for the Identification of Languages", RFC 1766,
#     March 1995.
#
# [MD5]
# :   Myers, J., and M. Rose, "The Content-MD5 Header Field", RFC 1864, October
#     1995.
#
# [MIME-IMB]
# :   Freed, N., and N. Borenstein, "MIME (Multipurpose Internet Mail
#     Extensions) Part One: Format of Internet Message Bodies", RFC 2045,
#     November 1996.
#
# [RFC-822]
# :   Crocker, D., "Standard for the Format of ARPA Internet Text Messages", STD
#     11, RFC 822, University of Delaware, August 1982.
#
# [RFC-2087]
# :   Myers, J., "IMAP4 QUOTA extension", RFC 2087, January 1997.
#
# [RFC-2086]
# :   Myers, J., "IMAP4 [`ACL`](https://docs.ruby-lang.org/en/2.7.0/ACL.html)
#     extension", RFC 2086, January 1997.
#
# [RFC-2195]
# :   Klensin, J., Catoe, R., and Krumviede, P., "IMAP/POP AUTHorize Extension
#     for Simple Challenge/Response", RFC 2195, September 1997.
#
# [SORT-THREAD-EXT]
# :   Crispin, M., "INTERNET MESSAGE ACCESS PROTOCOL - SORT and THREAD
#     Extensions", draft-ietf-imapext-sort, May 2003.
#
# [OSSL]
# :   http://www.openssl.org
#
# [RSSL]
# :   http://savannah.gnu.org/projects/rubypki
#
# [UTF7]
# :   Goldsmith, D. and Davis, M., "UTF-7: A Mail-Safe Transformation Format of
#     Unicode", RFC 2152, May 1997.
class Net::IMAP < Net::Protocol
  include ::SSL

  include ::OpenSSL

  include ::MonitorMixin
end

Net::IMAP::ANSWERED: untyped

Net::IMAP::CRLF: untyped

Net::IMAP::DATE_MONTH: untyped

Net::IMAP::DELETED: untyped

Net::IMAP::DRAFT: untyped

Net::IMAP::FLAGGED: untyped

Net::IMAP::MARKED: untyped

Net::IMAP::NOINFERIORS: untyped

Net::IMAP::NOSELECT: untyped

Net::IMAP::PORT: untyped

Net::IMAP::RECENT: untyped

Net::IMAP::SEEN: untyped

Net::IMAP::SSL_PORT: untyped

Net::IMAP::UNMARKED: untyped

# [`Net::IMAP::Address`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Address)
# represents electronic mail addresses.
#
# #### Fields:
#
# name
# :   Returns the phrase from [RFC-822] mailbox.
#
# route
# :   Returns the route from [RFC-822] route-addr.
#
# mailbox
# :   nil indicates end of [RFC-822] group. If non-nil and host is nil, returns
#     [RFC-822] group name. Otherwise, returns [RFC-822] local-part.
#
# host
# :   nil indicates [RFC-822] group syntax. Otherwise, returns [RFC-822] domain
#     name.
class Net::IMAP::Address < Struct
end

class Net::IMAP::Atom
end

# [`Error`](https://docs.ruby-lang.org/en/2.7.0/Error.html) raised upon a "BAD"
# response from the server, indicating that the client command violated the
# [`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html) protocol, or an
# internal server failure has occurred.
class Net::IMAP::BadResponseError < Net::IMAP::ResponseError
end

# [`Net::IMAP::BodyTypeAttachment`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeAttachment.html)
# represents attachment body structures of messages.
#
# #### Fields:
#
# media\_type
# :   Returns the content media type name.
#
# subtype
# :   Returns `nil`.
#
# param
# :   Returns a hash that represents parameters.
#
# multipart?
# :   Returns false.
class Net::IMAP::BodyTypeAttachment < Struct
end

# [`Net::IMAP::BodyTypeBasic`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeBasic.html)
# represents basic body structures of messages.
#
# #### Fields:
#
# media\_type
# :   Returns the content media type name as defined in [MIME-IMB].
#
# subtype
# :   Returns the content subtype name as defined in [MIME-IMB].
#
# param
# :   Returns a hash that represents parameters as defined in [MIME-IMB].
#
# content\_id
# :   Returns a string giving the content id as defined in [MIME-IMB].
#
# description
# :   Returns a string giving the content description as defined in [MIME-IMB].
#
# encoding
# :   Returns a string giving the content transfer encoding as defined in
#     [MIME-IMB].
#
# size
# :   Returns a number giving the size of the body in octets.
#
# md5
# :   Returns a string giving the body MD5 value as defined in [MD5].
#
# disposition
# :   Returns a Net::IMAP::ContentDisposition object giving the content
#     disposition.
#
# language
# :   Returns a string or an array of strings giving the body language value as
#     defined in [LANGUAGE-TAGS].
#
# extension
# :   Returns extension data.
#
# multipart?
# :   Returns false.
class Net::IMAP::BodyTypeBasic < Struct
end

class Net::IMAP::BodyTypeExtension < Struct
end

# [`Net::IMAP::BodyTypeMessage`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeMessage.html)
# represents MESSAGE/RFC822 body structures of messages.
#
# #### Fields:
#
# envelope
# :   Returns a Net::IMAP::Envelope giving the envelope structure.
#
# body
# :   Returns an object giving the body structure.
#
#
# And
# [`Net::IMAP::BodyTypeMessage`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeMessage.html)
# has all methods of
# [`Net::IMAP::BodyTypeText`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeText.html).
class Net::IMAP::BodyTypeMessage < Struct
end

# [`Net::IMAP::BodyTypeMultipart`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeMultipart.html)
# represents multipart body structures of messages.
#
# #### Fields:
#
# media\_type
# :   Returns the content media type name as defined in [MIME-IMB].
#
# subtype
# :   Returns the content subtype name as defined in [MIME-IMB].
#
# parts
# :   Returns multiple parts.
#
# param
# :   Returns a hash that represents parameters as defined in [MIME-IMB].
#
# disposition
# :   Returns a Net::IMAP::ContentDisposition object giving the content
#     disposition.
#
# language
# :   Returns a string or an array of strings giving the body language value as
#     defined in [LANGUAGE-TAGS].
#
# extension
# :   Returns extension data.
#
# multipart?
# :   Returns true.
class Net::IMAP::BodyTypeMultipart < Struct
end

# [`Net::IMAP::BodyTypeText`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeText.html)
# represents TEXT body structures of messages.
#
# #### Fields:
#
# lines
# :   Returns the size of the body in text lines.
#
#
# And
# [`Net::IMAP::BodyTypeText`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeText.html)
# has all fields of
# [`Net::IMAP::BodyTypeBasic`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeBasic.html).
class Net::IMAP::BodyTypeText < Struct
end

# [`Error`](https://docs.ruby-lang.org/en/2.7.0/Error.html) raised upon a "BYE"
# response from the server, indicating that the client is not being allowed to
# login, or has been timed out due to inactivity.
class Net::IMAP::ByeResponseError < Net::IMAP::ResponseError
end

# [`Net::IMAP::ContentDisposition`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#ContentDisposition)
# represents Content-Disposition fields.
#
# #### Fields:
#
# dsp\_type
# :   Returns the disposition type.
#
# param
# :   Returns a hash that represents parameters of the Content-Disposition
#     field.
class Net::IMAP::ContentDisposition < Struct
end

# [`Net::IMAP::ContinuationRequest`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#ContinuationRequest)
# represents command continuation requests.
#
# The command continuation request response is indicated by a "+" token instead
# of a tag. This form of response indicates that the server is ready to accept
# the continuation of a command from the client. The remainder of this response
# is a line of text.
#
# ```
# continue_req    ::= "+" SPACE (resp_text / base64)
# ```
#
# #### Fields:
#
# data
# :   Returns the data
#     ([`Net::IMAP::ResponseText`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#ResponseText)).
#
# raw\_data
# :   Returns the raw data string.
class Net::IMAP::ContinuationRequest < Struct
end

# Authenticator for the "CRAM-MD5" authentication type. See authenticate().
class Net::IMAP::CramMD5Authenticator
end

# [`Error`](https://docs.ruby-lang.org/en/2.7.0/Error.html) raised when data is
# in the incorrect format.
class Net::IMAP::DataFormatError < Net::IMAP::Error
end

# Authenticator for the "DIGEST-MD5" authentication type. See authenticate().
class Net::IMAP::DigestMD5Authenticator
end

Net::IMAP::DigestMD5Authenticator::STAGE_ONE: untyped

Net::IMAP::DigestMD5Authenticator::STAGE_TWO: untyped

# [`Net::IMAP::Envelope`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Envelope)
# represents envelope structures of messages.
#
# #### Fields:
#
# date
# :   Returns a string that represents the date.
#
# subject
# :   Returns a string that represents the subject.
#
# from
# :   Returns an array of
#     [`Net::IMAP::Address`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Address)
#     that represents the from.
#
# sender
# :   Returns an array of
#     [`Net::IMAP::Address`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Address)
#     that represents the sender.
#
# reply\_to
# :   Returns an array of
#     [`Net::IMAP::Address`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Address)
#     that represents the reply-to.
#
# to
# :   Returns an array of
#     [`Net::IMAP::Address`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Address)
#     that represents the to.
#
# cc
# :   Returns an array of
#     [`Net::IMAP::Address`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Address)
#     that represents the cc.
#
# bcc
# :   Returns an array of
#     [`Net::IMAP::Address`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Address)
#     that represents the bcc.
#
# in\_reply\_to
# :   Returns a string that represents the in-reply-to.
#
# message\_id
# :   Returns a string that represents the message-id.
class Net::IMAP::Envelope < Struct
end

# Superclass of [`IMAP`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html)
# errors.
class Net::IMAP::Error < StandardError
end

# [`Net::IMAP::FetchData`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#FetchData)
# represents the contents of the FETCH response.
#
# #### Fields:
#
# seqno
# :   Returns the message sequence number. (Note: not the unique identifier,
#     even for the UID command response.)
#
# attr
# :   Returns a hash. Each key is a data item name, and each value is its value.
#
#     The current data items are:
#
#     BODY
# :       A form of BODYSTRUCTURE without extension data.
#     [BODY](<section>)<<origin\_octet>>
# :       A string expressing the body contents of the specified section.
#     BODYSTRUCTURE
# :       An object that describes the [MIME-IMB] body structure of a message.
#         See
#         [`Net::IMAP::BodyTypeBasic`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeBasic.html),
#         [`Net::IMAP::BodyTypeText`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeText.html),
#         [`Net::IMAP::BodyTypeMessage`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeMessage.html),
#         [`Net::IMAP::BodyTypeMultipart`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP/BodyTypeMultipart.html).
#     ENVELOPE
# :       A
#         [`Net::IMAP::Envelope`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#Envelope)
#         object that describes the envelope structure of a message.
#     FLAGS
# :       A array of flag symbols that are set for this message. Flag symbols
#         are capitalized by
#         [`String#capitalize`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-capitalize).
#     INTERNALDATE
# :       A string representing the internal date of the message.
#     RFC822
# :       Equivalent to BODY[].
#     RFC822.HEADER
# :       Equivalent to [BODY.PEEK](HEADER).
#     RFC822.SIZE
# :       A number expressing the [RFC-822] size of the message.
#     RFC822.TEXT
# :       Equivalent to [BODY](TEXT).
#     UID
# :       A number expressing the unique identifier of the message.
class Net::IMAP::FetchData < Struct
end

# [`Error`](https://docs.ruby-lang.org/en/2.7.0/Error.html) raised when too many
# flags are interned to symbols.
class Net::IMAP::FlagCountError < Net::IMAP::Error
end

class Net::IMAP::Literal
end

# Authenticator for the "LOGIN" authentication type. See authenticate().
class Net::IMAP::LoginAuthenticator
end

Net::IMAP::LoginAuthenticator::STATE_PASSWORD: untyped

Net::IMAP::LoginAuthenticator::STATE_USER: untyped

# [`Net::IMAP::MailboxACLItem`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#MailboxACLItem)
# represents the response from GETACL.
#
# ```
# acl_data        ::= "ACL" SPACE mailbox *(SPACE identifier SPACE rights)
#
# identifier      ::= astring
#
# rights          ::= astring
# ```
#
# #### Fields:
#
# user
# :   Login name that has certain rights to the mailbox that was specified with
#     the getacl command.
#
# rights
# :   The access rights the indicated user has to the mailbox.
class Net::IMAP::MailboxACLItem < Struct
end

# [`Net::IMAP::MailboxList`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#MailboxList)
# represents contents of the LIST response.
#
# ```
# mailbox_list    ::= "(" #("\Marked" / "\Noinferiors" /
#                     "\Noselect" / "\Unmarked" / flag_extension) ")"
#                     SPACE (<"> QUOTED_CHAR <"> / nil) SPACE mailbox
# ```
#
# #### Fields:
#
# attr
# :   Returns the name attributes. Each name attribute is a symbol capitalized
#     by
#     [`String#capitalize`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-capitalize),
#     such as :Noselect (not :NoSelect).
#
# delim
# :   Returns the hierarchy delimiter.
#
# name
# :   Returns the mailbox name.
class Net::IMAP::MailboxList < Struct
end

# [`Net::IMAP::MailboxQuota`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#MailboxQuota)
# represents contents of GETQUOTA response. This object can also be a response
# to GETQUOTAROOT. In the syntax specification below, the delimiter used with
# the "#" construct is a single space (SPACE).
#
# ```
# quota_list      ::= "(" #quota_resource ")"
#
# quota_resource  ::= atom SPACE number SPACE number
#
# quota_response  ::= "QUOTA" SPACE astring SPACE quota_list
# ```
#
# #### Fields:
#
# mailbox
# :   The mailbox with the associated quota.
#
# usage
# :   Current storage usage of the mailbox.
#
# quota
# :   Quota limit imposed on the mailbox.
class Net::IMAP::MailboxQuota < Struct
end

# [`Net::IMAP::MailboxQuotaRoot`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#MailboxQuotaRoot)
# represents part of the GETQUOTAROOT response. (GETQUOTAROOT can also return
# [`Net::IMAP::MailboxQuota`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#MailboxQuota).)
#
# ```
# quotaroot_response ::= "QUOTAROOT" SPACE astring *(SPACE astring)
# ```
#
# #### Fields:
#
# mailbox
# :   The mailbox with the associated quota.
#
# quotaroots
# :   Zero or more quotaroots that affect the quota on the specified mailbox.
class Net::IMAP::MailboxQuotaRoot < Struct
end

class Net::IMAP::MessageSet
end

# [`Error`](https://docs.ruby-lang.org/en/2.7.0/Error.html) raised upon a "NO"
# response from the server, indicating that the client command could not be
# completed successfully.
class Net::IMAP::NoResponseError < Net::IMAP::ResponseError
end

# Common validators of number and nz\_number types
module Net::IMAP::NumValidator
end

# Authenticator for the "PLAIN" authentication type. See authenticate().
class Net::IMAP::PlainAuthenticator
end

class Net::IMAP::QuotedString
end

class Net::IMAP::RawData
end

# [`Net::IMAP::ResponseCode`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#ResponseCode)
# represents response codes.
#
# ```
# resp_text_code  ::= "ALERT" / "PARSE" /
#                     "PERMANENTFLAGS" SPACE "(" #(flag / "\*") ")" /
#                     "READ-ONLY" / "READ-WRITE" / "TRYCREATE" /
#                     "UIDVALIDITY" SPACE nz_number /
#                     "UNSEEN" SPACE nz_number /
#                     atom [SPACE 1*<any TEXT_CHAR except "]">]
# ```
#
# #### Fields:
#
# name
# :   Returns the name, such as "ALERT", "PERMANENTFLAGS", or "UIDVALIDITY".
#
# data
# :   Returns the data, if it exists.
class Net::IMAP::ResponseCode < Struct
end

# Superclass of all errors used to encapsulate "fail" responses from the server.
class Net::IMAP::ResponseError < Net::IMAP::Error
end

# [`Error`](https://docs.ruby-lang.org/en/2.7.0/Error.html) raised when a
# response from the server is non-parseable.
class Net::IMAP::ResponseParseError < Net::IMAP::Error
end

class Net::IMAP::ResponseParser
end

Net::IMAP::ResponseParser::ADDRESS_REGEXP: untyped

Net::IMAP::ResponseParser::ATOM_TOKENS: untyped

Net::IMAP::ResponseParser::BEG_REGEXP: untyped

Net::IMAP::ResponseParser::CTEXT_REGEXP: untyped

Net::IMAP::ResponseParser::DATA_REGEXP: untyped

Net::IMAP::ResponseParser::EXPR_BEG: untyped

Net::IMAP::ResponseParser::EXPR_CTEXT: untyped

Net::IMAP::ResponseParser::EXPR_DATA: untyped

Net::IMAP::ResponseParser::EXPR_RTEXT: untyped

Net::IMAP::ResponseParser::EXPR_TEXT: untyped

Net::IMAP::ResponseParser::FLAG_REGEXP: untyped

Net::IMAP::ResponseParser::RTEXT_REGEXP: untyped

Net::IMAP::ResponseParser::STRING_TOKENS: untyped

Net::IMAP::ResponseParser::TEXT_REGEXP: untyped

Net::IMAP::ResponseParser::T_ATOM: untyped

Net::IMAP::ResponseParser::T_BSLASH: untyped

Net::IMAP::ResponseParser::T_CRLF: untyped

Net::IMAP::ResponseParser::T_EOF: untyped

Net::IMAP::ResponseParser::T_LBRA: untyped

Net::IMAP::ResponseParser::T_LITERAL: untyped

Net::IMAP::ResponseParser::T_LPAR: untyped

Net::IMAP::ResponseParser::T_NIL: untyped

Net::IMAP::ResponseParser::T_NUMBER: untyped

Net::IMAP::ResponseParser::T_PERCENT: untyped

Net::IMAP::ResponseParser::T_PLUS: untyped

Net::IMAP::ResponseParser::T_QUOTED: untyped

Net::IMAP::ResponseParser::T_RBRA: untyped

Net::IMAP::ResponseParser::T_RPAR: untyped

Net::IMAP::ResponseParser::T_SPACE: untyped

Net::IMAP::ResponseParser::T_STAR: untyped

Net::IMAP::ResponseParser::T_TEXT: untyped

class Net::IMAP::ResponseParser::Token < Struct
end

# [`Net::IMAP::ResponseText`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#ResponseText)
# represents texts of responses. The text may be prefixed by the response code.
#
# ```
# resp_text       ::= ["[" resp_text_code "]" SPACE] (text_mime2 / text)
#                     ;; text SHOULD NOT begin with "[" or "="
# ```
#
# #### Fields:
#
# code
# :   Returns the response code. See ((<Net::IMAP::ResponseCode>)).
#
# text
# :   Returns the text.
class Net::IMAP::ResponseText < Struct
end

# [`Net::IMAP::StatusData`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#StatusData)
# represents the contents of the STATUS response.
#
# #### Fields:
#
# mailbox
# :   Returns the mailbox name.
#
# attr
# :   Returns a hash. Each key is one of "MESSAGES", "RECENT", "UIDNEXT",
#     "UIDVALIDITY", "UNSEEN". Each value is a number.
class Net::IMAP::StatusData < Struct
end

# [`Net::IMAP::TaggedResponse`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#TaggedResponse)
# represents tagged responses.
#
# The server completion result response indicates the success or failure of the
# operation. It is tagged with the same tag as the client command which began
# the operation.
#
# ```
# response_tagged ::= tag SPACE resp_cond_state CRLF
#
# tag             ::= 1*<any ATOM_CHAR except "+">
#
# resp_cond_state ::= ("OK" / "NO" / "BAD") SPACE resp_text
# ```
#
# #### Fields:
#
# tag
# :   Returns the tag.
#
# name
# :   Returns the name, one of "OK", "NO", or "BAD".
#
# data
# :   Returns the data. See ((<Net::IMAP::ResponseText>)).
#
# raw\_data
# :   Returns the raw data string.
class Net::IMAP::TaggedResponse < Struct
end

# [`Net::IMAP::ThreadMember`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#ThreadMember)
# represents a thread-node returned by
# [`Net::IMAP#thread`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#method-i-thread).
#
# #### Fields:
#
# seqno
# :   The sequence number of this message.
#
# children
# :   An array of
#     [`Net::IMAP::ThreadMember`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#ThreadMember)
#     objects for mail items that are children of this in the thread.
class Net::IMAP::ThreadMember < Struct
end

# [`Net::IMAP::UntaggedResponse`](https://docs.ruby-lang.org/en/2.7.0/Net/IMAP.html#UntaggedResponse)
# represents untagged responses.
#
# [`Data`](https://docs.ruby-lang.org/en/2.7.0/Data.html) transmitted by the
# server to the client and status responses that do not indicate command
# completion are prefixed with the token "\*", and are called untagged
# responses.
#
# ```
# response_data   ::= "*" SPACE (resp_cond_state / resp_cond_bye /
#                     mailbox_data / message_data / capability_data)
# ```
#
# #### Fields:
#
# name
# :   Returns the name, such as "FLAGS", "LIST", or "FETCH".
#
# data
# :   Returns the data such as an array of flag symbols, a
#     ((<Net::IMAP::MailboxList>)) object.
#
# raw\_data
# :   Returns the raw data string.
class Net::IMAP::UntaggedResponse < Struct
end
