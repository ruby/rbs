%a{annotate:rdoc:skip}
module URI
  # <!-- rdoc-file=lib/uri/http.rb -->
  # The syntax of HTTP URIs is defined in RFC1738 section 3.3.
  #
  # Note that the Ruby URI library allows HTTP URLs containing usernames and
  # passwords. This is not legal as per the RFC, but used to be supported in
  # Internet Explorer 5 and 6, before the MS04-004 security update. See
  # <URL:http://support.microsoft.com/kb/834489>.
  #
  class HTTP < Generic
    # <!-- rdoc-file=lib/uri/http.rb -->
    # A Default port of 80 for URI::HTTP.
    #
    DEFAULT_PORT: Integer

    # <!-- rdoc-file=lib/uri/http.rb -->
    # An Array of the available components for URI::HTTP.
    #
    COMPONENT: Array[Symbol]

    # <!--
    #   rdoc-file=lib/uri/http.rb
    #   - build(args)
    # -->
    # ## Description
    #
    # Creates a new URI::HTTP object from components, with syntax checking.
    #
    # The components accepted are userinfo, host, port, path, query, and fragment.
    #
    # The components should be provided either as an Array, or as a Hash with keys
    # formed by preceding the component names with a colon.
    #
    # If an Array is used, the components must be passed in the order `[userinfo,
    # host, port, path, query, fragment]`.
    #
    # Example:
    #
    #     uri = URI::HTTP.build(host: 'www.example.com', path: '/foo/bar')
    #
    #     uri = URI::HTTP.build([nil, "www.example.com", nil, "/path",
    #       "query", 'fragment'])
    #
    # Currently, if passed userinfo components this method generates invalid HTTP
    # URIs as per RFC 1738.
    #
    def self.build: (Array[String | Integer] args) -> instance
                  | ({ userinfo: String?, host: String?, port: Integer?, path: String?, query: String?, fragment: String? }) -> instance

    # <!--
    #   rdoc-file=lib/uri/http.rb
    #   - authority()
    # -->
    # ## Description
    #
    # Returns the authority for an HTTP uri, as defined in
    # https://datatracker.ietf.org/doc/html/rfc3986/#section-3.2.
    #
    # Example:
    #
    #     URI::HTTP.build(host: 'www.example.com', path: '/foo/bar').authority #=> "www.example.com"
    #     URI::HTTP.build(host: 'www.example.com', port: 8000, path: '/foo/bar').authority #=> "www.example.com:8000"
    #     URI::HTTP.build(host: 'www.example.com', port: 80, path: '/foo/bar').authority #=> "www.example.com"
    #
    def authority: () -> String

    # <!--
    #   rdoc-file=lib/uri/http.rb
    #   - origin()
    # -->
    # ## Description
    #
    # Returns the origin for an HTTP uri, as defined in
    # https://datatracker.ietf.org/doc/html/rfc6454.
    #
    # Example:
    #
    #     URI::HTTP.build(host: 'www.example.com', path: '/foo/bar').origin #=> "http://www.example.com"
    #     URI::HTTP.build(host: 'www.example.com', port: 8000, path: '/foo/bar').origin #=> "http://www.example.com:8000"
    #     URI::HTTP.build(host: 'www.example.com', port: 80, path: '/foo/bar').origin #=> "http://www.example.com"
    #     URI::HTTPS.build(host: 'www.example.com', path: '/foo/bar').origin #=> "https://www.example.com"
    #
    def origin: () -> String

    # <!--
    #   rdoc-file=lib/uri/http.rb
    #   - request_uri()
    # -->
    # ## Description
    #
    # Returns the full path for an HTTP request, as required by Net::HTTP::Get.
    #
    # If the URI contains a query, the full path is URI#path + '?' + URI#query.
    # Otherwise, the path is simply URI#path.
    #
    # Example:
    #
    #     uri = URI::HTTP.build(path: '/foo/bar', query: 'test=true')
    #     uri.request_uri #  => "/foo/bar?test=true"
    #
    def request_uri: () -> String
  end
end
